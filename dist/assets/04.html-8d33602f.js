import{_ as n,o as t,c as e,a as s}from"./app-3c87854f.js";const a={},l=s(`<h3 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型" aria-hidden="true">#</a> 数据类型</h3><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code>MySQL中存的是数据。只要是数据，我们就会规定数据的类型。在表的字段中规定了使用的是某个数据类型。
那么，在插入的数据中就要使用对应的数据类型。并且，遵守数据类型的长度要求。

在MySQL里面我们将数据类型分为了以下一些类型：
<span class="token number">1</span>、数值类型（整型、浮点）
<span class="token number">2</span>、字符串类型
<span class="token number">3</span>、日期时间类型
<span class="token number">4</span>、复合类型
<span class="token number">5</span>、空间类型（非科学性工作基本不用，不做讲解）
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="整型" tabindex="-1"><a class="header-anchor" href="#整型" aria-hidden="true">#</a> 整型</h3><table><thead><tr><th style="text-align:left;">MySQL数据类型</th><th style="text-align:left;">所占字节</th><th style="text-align:left;">值范围</th></tr></thead><tbody><tr><td style="text-align:left;">tinyint</td><td style="text-align:left;">1字节</td><td style="text-align:left;">-128~127</td></tr><tr><td style="text-align:left;">smallint</td><td style="text-align:left;">2字节</td><td style="text-align:left;">-32768~32767</td></tr><tr><td style="text-align:left;">mediumint</td><td style="text-align:left;">3字节</td><td style="text-align:left;">-8388608~8388607</td></tr><tr><td style="text-align:left;">int</td><td style="text-align:left;">4字节</td><td style="text-align:left;">范围-2147483648~2147483647</td></tr><tr><td style="text-align:left;">bigint</td><td style="text-align:left;">8字节</td><td style="text-align:left;">±9.22*10的18次方</td></tr></tbody></table><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code>整型的长度不同，在实际使用过程也就不同。
MySQL 以一个可选的显示宽度指示器的形式对 <span class="token constant">SQL</span> 标准进行扩展，这样当从数据库检索一个值时，
可以把这个值加长到指定的长度。例如，指定一个字段的类型为 <span class="token keyword type-declaration">INT</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>，
就可以保证所包含数字少于 <span class="token number">6</span> 个的值从数据库中检索出来时能够自动地用空格填充。
需要注意的是，使用一个宽度指示器不会影响字段的大小和它可以存储的值的范围。

注意：
<span class="token number">1</span>、在创建表字段时，性别我们可以使用无符号的微小整型（tinyint）来表示。用<span class="token number">0</span>表示女、用<span class="token number">1</span>表示男。用<span class="token number">2</span>表示未知。

<span class="token number">2</span>、同样人类年龄也是，在创建表字段时可用用无符号的整型。因为人类的年龄还没有负数

<span class="token number">3</span>、在实际使用过程中。我们业务中最大需要存储多大的数值。我们创建表时，就选择什么样的类型来存储这样的值。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="浮点类型" tabindex="-1"><a class="header-anchor" href="#浮点类型" aria-hidden="true">#</a> 浮点类型</h3><table><thead><tr><th style="text-align:left;">MySQL数据类型</th><th style="text-align:left;">所占字节</th><th style="text-align:left;">值范围</th></tr></thead><tbody><tr><td style="text-align:left;">float(m, d)</td><td style="text-align:left;">4字节</td><td style="text-align:left;">单精度浮点型，m总个数，d小数位</td></tr><tr><td style="text-align:left;">double(m, d)</td><td style="text-align:left;">8字节</td><td style="text-align:left;">双精度浮点型，m总个数，d小数位</td></tr><tr><td style="text-align:left;">decimal(m, d)</td><td style="text-align:left;">...</td><td style="text-align:left;">decimal是存储为字符串的浮点数</td></tr></tbody></table><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code>注意：
	<span class="token number">1.</span>浮点是非精确值，会存在不太准确的情况
	<span class="token number">2.</span>而decimal叫做定点数。在MySQL内部，本质上是用字符串存储的。
	实际使用过程中如果存在金额、钱精度要求比较高的浮点数存储，建议使用decimal（定点数）这个类型。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="字符类型" tabindex="-1"><a class="header-anchor" href="#字符类型" aria-hidden="true">#</a> 字符类型</h3><table><thead><tr><th style="text-align:left;">MySQL数据类型</th><th style="text-align:left;">所占字节</th><th style="text-align:left;">值范围</th></tr></thead><tbody><tr><td style="text-align:left;">CHAR</td><td style="text-align:left;">0-255字节</td><td style="text-align:left;">定长字符串</td></tr><tr><td style="text-align:left;">VARCHAR</td><td style="text-align:left;">0-255字节</td><td style="text-align:left;">变长字符串</td></tr><tr><td style="text-align:left;">TINYBLOB</td><td style="text-align:left;">0-255字节</td><td style="text-align:left;">不超过255个字符的二进制字符串</td></tr><tr><td style="text-align:left;">TINYTEXT</td><td style="text-align:left;">0-255字节</td><td style="text-align:left;">短文本字符串</td></tr><tr><td style="text-align:left;">BLOB</td><td style="text-align:left;">0-65535字节</td><td style="text-align:left;">二进制形式的长文本数据</td></tr><tr><td style="text-align:left;">TEXT</td><td style="text-align:left;">0-65535字节</td><td style="text-align:left;">长文本数据</td></tr><tr><td style="text-align:left;">MEDIUMBLOB</td><td style="text-align:left;">0-16 777 215字节</td><td style="text-align:left;">二进制形式的中等长度文本数据</td></tr><tr><td style="text-align:left;">MEDIUMTEXT</td><td style="text-align:left;">0-16 777 215字节</td><td style="text-align:left;">中等长度文本数据</td></tr><tr><td style="text-align:left;">LOGNGBLOB</td><td style="text-align:left;">0-4 294 967 295字节</td><td style="text-align:left;">二进制形式的极大文本数据</td></tr><tr><td style="text-align:left;">LONGTEXT</td><td style="text-align:left;">0-4 294 967 295字节</td><td style="text-align:left;">极大文本数据</td></tr><tr><td style="text-align:left;">VARBINARY(M)</td><td style="text-align:left;">允许长度0-M个字节的定长字节符串</td><td style="text-align:left;">值的长度+1个字节</td></tr><tr><td style="text-align:left;">BINARY(M)</td><td style="text-align:left;">M</td><td style="text-align:left;">允许长度0-M个字节的定长字节符串</td></tr></tbody></table><h4 id="char" tabindex="-1"><a class="header-anchor" href="#char" aria-hidden="true">#</a> CHAR</h4><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code>类型用于定长字符串，并且必须在圆括号内用一个大小修饰符来定义。
这个大小修饰符的范围从 <span class="token number">0</span><span class="token operator">-</span><span class="token number">255</span>。比指定长度大的值将被截短，而比指定长度小的值将会用空格作填补
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="varchar" tabindex="-1"><a class="header-anchor" href="#varchar" aria-hidden="true">#</a> VARCHAR</h4><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code>把这个大小视为值的大小，在长度不足的情况下就用空格补足。
而 <span class="token constant">VARCHAR</span> 类型把它视为最大值并且只使用存储字符串实际需要的长度
类型不会被空格填补，但长于指示器的值仍然会被截短。
因为 <span class="token constant">VARCHAR</span> 类型可以根据实际内容动态改变存储值的长度，
所以在不能确定字段需要多少字符时使用 <span class="token constant">VARCHAR</span> 类型可以大大地节约磁盘空间、提高存储效率。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="text类型与blob类型" tabindex="-1"><a class="header-anchor" href="#text类型与blob类型" aria-hidden="true">#</a> text类型与blob类型</h4><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code>对于字段长度要求超过 <span class="token number">255</span> 个的情况下，MySQL 提供了 <span class="token constant">TEXT</span> 和 <span class="token constant">BLOB</span> 两种类型。
根据存储数据的大小，它们都有不同的子类型。这些大型的数据用于存储文本块或图像、
声音文件等二进制数据类型。
<span class="token constant">TEXT</span> 和 <span class="token constant">BLOB</span> 类型在分类和比较上存在区别。
<span class="token constant">BLOB</span> 类型区分大小写，而 <span class="token constant">TEXT</span> 不区分大小写。大小修饰符不用于各种 <span class="token constant">BLOB</span> 和 <span class="token constant">TEXT</span> 子类型。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="时间类型" tabindex="-1"><a class="header-anchor" href="#时间类型" aria-hidden="true">#</a> 时间类型</h3><table><thead><tr><th style="text-align:left;">MySQL数据类型</th><th style="text-align:left;">所占字节</th><th style="text-align:left;">值范围</th></tr></thead><tbody><tr><td style="text-align:left;">date</td><td style="text-align:left;">3字节</td><td style="text-align:left;">日期，格式：2014-09-18</td></tr><tr><td style="text-align:left;">time</td><td style="text-align:left;">3字节</td><td style="text-align:left;">时间，格式：08:42:30</td></tr><tr><td style="text-align:left;">datetime</td><td style="text-align:left;">8字节</td><td style="text-align:left;">日期时间，格式：2014-09-18 08:42:30</td></tr><tr><td style="text-align:left;">timestamp</td><td style="text-align:left;">4字节</td><td style="text-align:left;">自动存储记录修改的时间</td></tr><tr><td style="text-align:left;">year</td><td style="text-align:left;">1字节</td><td style="text-align:left;">年份</td></tr></tbody></table><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code>注意：
<span class="token number">1</span>、时间类型在web系统中用的比较少，很多时候很多人喜欢使用<span class="token keyword type-declaration">int</span>来存储时间。
插入时插入的是unix时间戳，因为这种方式更方便计算。
在前端业务中用date类型的函数，再将unix时间戳转成人们可识别的时间。

<span class="token number">2</span>、上面的类型你可以根据实际情况实际进行选择

<span class="token number">3</span>、有些人为了在数据库管理中方便查看，也有人使用datetime类型来存储时间。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="复合类型" tabindex="-1"><a class="header-anchor" href="#复合类型" aria-hidden="true">#</a> 复合类型</h3><table><thead><tr><th style="text-align:left;">MySQL数据类型</th><th style="text-align:left;">所占字节</th><th style="text-align:left;">值范围</th></tr></thead><tbody><tr><td style="text-align:left;">set</td><td style="text-align:left;">集合类型</td><td style="text-align:left;">set(&quot;member&quot;,&quot;member2&quot;,…&quot;member64&quot;)</td></tr><tr><td style="text-align:left;">enum</td><td style="text-align:left;">枚举类型</td><td style="text-align:left;">enum(&quot;member1&quot;,&quot;member2&quot;,…&quot;member65535&quot;)</td></tr></tbody></table><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code>一个 <span class="token keyword">ENUM</span> 类型只允许从一个集合中取得一个值；而 <span class="token constant">SET</span> 类型允许从一个集合中取得任意多个值
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="enum-类型" tabindex="-1"><a class="header-anchor" href="#enum-类型" aria-hidden="true">#</a> ENUM 类型</h4><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">ENUM</span> 类型因为只允许在集合中取得一个值，有点类似于单选项。
在处理相互排拆的数据时容易让人理解，比如人类的性别。
<span class="token keyword">ENUM</span> 类型字段可以从集合中取得一个值或使用<span class="token constant">null</span>值，除此之外的输入将会使 MySQL 在这个字段中插入一个空字符串。
另外如果插入值的大小写与集合中值的大小写不匹配，MySQL会自动使用插入值的大小写转换成与集合中大小写一致的值。

<span class="token keyword">ENUM</span> 类型在系统内部可以存储为数字，并且从<span class="token number">1</span>开始用数字做索引。
一个 <span class="token keyword">ENUM</span> 类型最多可以包含 <span class="token number">65536</span> 个元素，其中一个元素被 MySQL 保留，
用来存储错误信息，这个错误值用索引 <span class="token number">0</span> 或者一个空字符串表示。

MySQL 认为 <span class="token keyword">ENUM</span> 类型集合中出现的值是合法输入，除此之外其它任何输入都将失败。
这说明通过搜索包含空字符串或对应数字索引为 <span class="token number">0</span> 的行就可以很容易地找到错误记录的位置。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="set-类型" tabindex="-1"><a class="header-anchor" href="#set-类型" aria-hidden="true">#</a> SET 类型</h4><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token constant">SET</span> 类型与 <span class="token keyword">ENUM</span> 类型相似但不相同。<span class="token constant">SET</span>类型可以从预定义的集合中取得任意数量的值。
并且与 <span class="token keyword">ENUM</span> 类型相同的是任何试图在 <span class="token constant">SET</span> 类型字段中插入非预定义的值都会使MySQL插入一个空字符串。
如果插入一个即有合法的元素又有非法的元素的记录，MySQL 将会保留合法的元素，除去非法的元素。


一个 <span class="token constant">SET</span> 类型最多可以包含 <span class="token number">64</span> 个元素。在 <span class="token constant">SET</span> 元素中值被存储为一个分离的<span class="token string double-quoted-string">&quot;位&quot;</span>序列，这些<span class="token string double-quoted-string">&quot;位&quot;</span>表示与它相对应的元素。
<span class="token string double-quoted-string">&quot;位&quot;</span>是创建有序元素集合的一种简单而有效的方式。
并且它还去除了重复的元素，所以<span class="token constant">SET</span>类型中不可能包含两个相同的元素。
希望从 <span class="token constant">SET</span> 类型字段中找出非法的记录只需查找包含空字符串或二进制值为 <span class="token number">0</span> 的行。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="类型使用" tabindex="-1"><a class="header-anchor" href="#类型使用" aria-hidden="true">#</a> 类型使用</h4><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code>我们学习了这么多类型，在创建表的语句的时候使用对应的类型即可。

举例如下：
<span class="token constant">CREATE</span> <span class="token constant">TABLE</span> <span class="token keyword">IF</span> <span class="token constant">NOT</span> <span class="token constant">EXISTS</span> <span class="token function">demo</span> <span class="token punctuation">(</span>
	id <span class="token keyword type-declaration">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token constant">NOT</span> <span class="token constant">NULL</span><span class="token punctuation">,</span>
	username <span class="token function">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token constant">NOT</span> <span class="token constant">NULL</span><span class="token punctuation">,</span>
	password <span class="token function">char</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token constant">NOT</span> <span class="token constant">NULL</span><span class="token punctuation">,</span>
	content longtext <span class="token constant">NOT</span> <span class="token constant">NULL</span><span class="token punctuation">,</span>
	createtime datetime <span class="token constant">NOT</span> <span class="token constant">NULL</span><span class="token punctuation">,</span>
	sex <span class="token function">tinyint</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token constant">NOT</span> <span class="token constant">NULL</span>
<span class="token punctuation">)</span> <span class="token constant">ENGINE</span><span class="token operator">=</span>InnoDB <span class="token keyword">DEFAULT</span> <span class="token constant">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="字段其他属性设置" tabindex="-1"><a class="header-anchor" href="#字段其他属性设置" aria-hidden="true">#</a> 字段其他属性设置</h3><h4 id="unsigned" tabindex="-1"><a class="header-anchor" href="#unsigned" aria-hidden="true">#</a> UNSIGNED</h4><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token constant">UNSIGNED</span>（无符号）
主要用于整型和浮点类型，使用无符号。即，没有前面面的<span class="token operator">-</span>（负号）。
存储位数更长。tinyint整型的取值区间为，<span class="token operator">-</span><span class="token number">128</span><span class="token operator">~</span><span class="token number">127</span>。而使用无符号后可存储<span class="token number">0</span><span class="token operator">-</span><span class="token number">255</span>个长度。
创建时在整型或浮点字段语句后接上：
<span class="token operator">&gt;</span> unsigned
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="zerofill" tabindex="-1"><a class="header-anchor" href="#zerofill" aria-hidden="true">#</a> ZEROFILL</h4><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token number">0</span>（不是空格）可以用来真补输出的值。使用这个修饰符可以阻止 MySQL 数据库存储负值。
创建时在整型或浮点字段语句后接上：
<span class="token operator">&gt;</span> zerofill
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="default" tabindex="-1"><a class="header-anchor" href="#default" aria-hidden="true">#</a> default</h4><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">default</span>属性确保在没有任何值可用的情况下，赋予某个常量值，这个值必须是常量，因为MySQL不允许插入函数或表达式值。

此外，此属性无法用于<span class="token constant">BLOB</span>或<span class="token constant">TEXT</span>列。
如果已经为此列指定了<span class="token constant">NULL</span>属性，没有指定默认值时默认值将为<span class="token constant">NULL</span>，否则默认值将依赖于字段的数据类型。

创建时在整型或浮点字段语句后接上：
<span class="token operator">&gt;</span> <span class="token keyword">default</span> <span class="token string single-quoted-string">&#39;值&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="not-null" tabindex="-1"><a class="header-anchor" href="#not-null" aria-hidden="true">#</a> not null</h4><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code>如果将一个列定义为not <span class="token constant">null</span>，将不允许向该列插入<span class="token constant">null</span>值。
建议在重要情况下始终使用not <span class="token constant">null</span>属性，因为它提供了一个基本验证，确保已经向查询传递了所有必要的值。
创建时在整型或浮点字段语句后接上：
<span class="token operator">&gt;</span> not <span class="token constant">null</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="null" tabindex="-1"><a class="header-anchor" href="#null" aria-hidden="true">#</a> null</h4><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code>为列指定<span class="token constant">null</span>属性时，该列可以保持为空，而不论行中其它列是否已经被填充。
记住，<span class="token constant">null</span>精确的说法是<span class="token string double-quoted-string">&quot;无&quot;</span>，而不是空字符串或<span class="token number">0</span>。
创建时在整型或浮点字段语句后不要声明not <span class="token constant">null</span>即可。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,39),d=[l];function i(r,c){return t(),e("div",null,d)}const o=n(a,[["render",i],["__file","04.html.vue"]]);export{o as default};

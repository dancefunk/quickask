import{_ as p,r as l,o,c as i,b as n,d as s,e as t,a as e}from"./app-d50584af.js";const c="/dist/assets/images/html5/threejs/material.png",u="/dist/assets/images/html5/threejs/PerspectiveCamera.jpg",r="/dist/assets/images/html5/threejs/OrthographicCamera.jpg",d={},k=n("h2",{id:"链接及参考资料",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#链接及参考资料","aria-hidden":"true"},"#"),s(" 链接及参考资料")],-1),m=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"left"}},"说明"),n("th",{style:{"text-align":"left"}},"链接")])],-1),v=n("td",{style:{"text-align":"left"}},"3D模型下载(热门)",-1),b={style:{"text-align":"left"}},h={href:"https://sketchfab.com/",target:"_blank",rel:"noopener noreferrer"},g=n("td",{style:{"text-align":"left"}},"3D模型下载",-1),f={style:{"text-align":"left"}},y={href:"https://www.3dxy.com/",target:"_blank",rel:"noopener noreferrer"},x=n("td",{style:{"text-align":"left"}},"ThreeJS中文网",-1),w={style:{"text-align":"left"}},E={href:"http://www.webgl3d.cn/",target:"_blank",rel:"noopener noreferrer"},T=n("td",{style:{"text-align":"left"}},"ThreeJS官网",-1),j={style:{"text-align":"left"}},_={href:"https://threejs.org/",target:"_blank",rel:"noopener noreferrer"},H=n("td",{style:{"text-align":"left"}},"ThreeJS中文教程",-1),L={style:{"text-align":"left"}},R={href:"https://techbrood.com/threejs/docs/",target:"_blank",rel:"noopener noreferrer"},M=n("td",{style:{"text-align":"left"}},"ThreeJS基础入门",-1),C={style:{"text-align":"left"}},A={href:"https://blog.csdn.net/qq_30100043/category_9274092.html",target:"_blank",rel:"noopener noreferrer"},G=n("td",{style:{"text-align":"left"}},"ThreeJS技术博客",-1),S={style:{"text-align":"left"}},q={href:"http://www.yanhuangxueyuan.com/",target:"_blank",rel:"noopener noreferrer"},P=e(`<h2 id="教程仓库源代码" tabindex="-1"><a class="header-anchor" href="#教程仓库源代码" aria-hidden="true">#</a> 教程仓库源代码</h2><h2 id="threejs开发流程" tabindex="-1"><a class="header-anchor" href="#threejs开发流程" aria-hidden="true">#</a> ThreeJS开发流程</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>开发流程：
创建场景 =&gt; 创建相机 =&gt; 创建材质 =&gt; 创建形状 =&gt; 创建光照 =&gt; 光照和实体添加到场景中 =&gt; 创建渲染器 =&gt; 执行渲染 =&gt; 运行动画
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="threejs核心掌握" tabindex="-1"><a class="header-anchor" href="#threejs核心掌握" aria-hidden="true">#</a> ThreeJS核心掌握</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>1、Scene场景及dat.gui页面调试
2、Geometry几何体
3、Material材质
4、Light光照
5、Camera相机
6、Points粒子
7、Controls控制器
8、Loaders模型导入
9、Animation动画
10、在vue框架、react框架中，如何使用
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="dat-gui调试工具" tabindex="-1"><a class="header-anchor" href="#dat-gui调试工具" aria-hidden="true">#</a> Dat.gui调试工具</h2>`,6),D={href:"https://github.com/dataarts/dat.gui",target:"_blank",rel:"noopener noreferrer"},F=e(`<h2 id="scene场景简述" tabindex="-1"><a class="header-anchor" href="#scene场景简述" aria-hidden="true">#</a> Scene场景简述</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>场景是用来保存画布上所有元素信息的容器，比如它可以保存 对象、光源、物体 等信息
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="常用属性" tabindex="-1"><a class="header-anchor" href="#常用属性" aria-hidden="true">#</a> 常用属性</h4><table><thead><tr><th style="text-align:left;">属性名</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">children</td><td style="text-align:left;">返回一个场景中所有对象的列表，包括摄像机和光源</td></tr><tr><td style="text-align:left;">fog</td><td style="text-align:left;">给场景添加雾化效果，雾化效果的特点是场景中的物体离得越远就会变得越模糊</td></tr><tr><td style="text-align:left;">overrideMaterial</td><td style="text-align:left;">使用该属性可以强制场景中的所有物体使用相同的材质</td></tr></tbody></table><h4 id="方法" tabindex="-1"><a class="header-anchor" href="#方法" aria-hidden="true">#</a> 方法</h4><table><thead><tr><th style="text-align:left;">方法名</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">add</td><td style="text-align:left;">向场景中添加对象</td></tr><tr><td style="text-align:left;">remove</td><td style="text-align:left;">将对象从场景中移除</td></tr><tr><td style="text-align:left;">traverse</td><td style="text-align:left;">返回场景中的所有物体</td></tr><tr><td style="text-align:left;">getObjectByName</td><td style="text-align:left;">查找特定名字的对象</td></tr></tbody></table><h2 id="geometry几何体" tabindex="-1"><a class="header-anchor" href="#geometry几何体" aria-hidden="true">#</a> Geometry几何体</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>一个模型是由几何体Geometry和材质material组成
Three<span class="token punctuation">.</span>js内置了很多的几何体种类，如：立方体、三棱锥、球、八面体、十二面体、二十面体等等
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="geometry和buffergeometry" tabindex="-1"><a class="header-anchor" href="#geometry和buffergeometry" aria-hidden="true">#</a> Geometry和BufferGeometry</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>当前Three<span class="token punctuation">.</span>js内置了这两种几何体类型Geometry和BufferGeometry
这两个几何体类型都是用于存储模型的顶点位置、面的索引、法向量、颜色、uv纹理以及一些自定义的属性
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="geometry和buffergeometry区别" tabindex="-1"><a class="header-anchor" href="#geometry和buffergeometry区别" aria-hidden="true">#</a> Geometry和BufferGeometry区别</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Geometry
	使用了Three<span class="token punctuation">.</span>js提供的<span class="token constant">THREE</span><span class="token punctuation">.</span>Vector3或者<span class="token constant">THREE</span><span class="token punctuation">.</span>Color这样的对象来存储数据
	易与阅读和编辑
	性能弱一些
	适合动画场景
	
BufferGeometry
	存储数据原始
	不易阅读和编辑
	性能好
	适合存储一些放入场景内不需要再额外操作的模型
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="geometry转换成buffergeometry" tabindex="-1"><a class="header-anchor" href="#geometry转换成buffergeometry" aria-hidden="true">#</a> Geometry转换成BufferGeometry</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//实例化一个BufferGeometry对象</span>
<span class="token keyword">var</span> bufferGeo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>BufferGeometry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 

<span class="token comment">//调用对象的fromGeometry方法，并将需要转换的geometry传入</span>
<span class="token comment">//bufferGeo为geometry转换成的BufferGeometry</span>
bufferGeo<span class="token punctuation">.</span><span class="token function">fromGeometry</span><span class="token punctuation">(</span>geometry<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="buffergeometry转换成geometry" tabindex="-1"><a class="header-anchor" href="#buffergeometry转换成geometry" aria-hidden="true">#</a> BufferGeometry转换成Geometry</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//实例化一个Geometry对象</span>
<span class="token keyword">var</span> geo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>Geometry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//调用对象的fromBufferGeometry方法，并将需要转换的bufferGeometry传入</span>
<span class="token comment">//geo为转换转换成的Geometry</span>
geo<span class="token punctuation">.</span><span class="token function">fromBufferGeometry</span><span class="token punctuation">(</span>bufferGeometry<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="material材质" tabindex="-1"><a class="header-anchor" href="#material材质" aria-hidden="true">#</a> Material材质</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>在 Three.js 中，材质（Material）定义了物体表面的外观。
它们决定了物体的颜色、纹理、光滑度、透明度等特性。
你可以将材质理解为场景中物体的皮肤。
Three.js 提供了多种材质类型，以满足不同场景的需求。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+c+`" alt="Material"></p><h4 id="基础属性" tabindex="-1"><a class="header-anchor" href="#基础属性" aria-hidden="true">#</a> 基础属性</h4><p>最常用的，通过这些属性，可以控制物体的不透明度、是否可见以及如何被引用(id或name)</p><table><thead><tr><th style="text-align:left;">属性</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">id（标识符）</td><td style="text-align:left;">用来标识材质，在创建时自动赋值。第一个材质的值为0，每新增一个值加1</td></tr><tr><td style="text-align:left;">uuid（唯一ID）</td><td style="text-align:left;">这是生成的唯一ID，在内部使用</td></tr><tr><td style="text-align:left;">name（名称）</td><td style="text-align:left;">通过这个属性可以给材质一个名称，用于调试标识</td></tr><tr><td style="text-align:left;">opacity（透明度）</td><td style="text-align:left;">定义物体透明度，赋值范围0~1</td></tr><tr><td style="text-align:left;">transparent</td><td style="text-align:left;">是否透明</td></tr><tr><td style="text-align:left;">overdraw（过度描绘）</td><td style="text-align:left;">当使用THREE.CanvasRender渲染器时，多边形会被渲染得稍微大些。如果两个多边形边缘有明显间隙时，可以将这个属性设置为true</td></tr><tr><td style="text-align:left;">visible（是否可见）</td><td style="text-align:left;">材质是否可见</td></tr><tr><td style="text-align:left;">side（侧面）</td><td style="text-align:left;">定义几何体那个面使用材质，有前面/外侧(THREE.FrontSide)是默认值，后面/内侧(THREE.BackSide)，双侧(THREE.DoubleSide)，即材质应用到物体得内外两侧</td></tr><tr><td style="text-align:left;">needsUpdate(是否更新)</td><td style="text-align:left;">对于材质的某些修改，你需要告诉threejs材质已经修改了。如果设置为true，会使用新材质属性更新它的缓存</td></tr></tbody></table><h4 id="融合属性" tabindex="-1"><a class="header-anchor" href="#融合属性" aria-hidden="true">#</a> 融合属性</h4><p>每个物体都有一系列的融合属性。这些属性决定了物体如何与背景融合。即两种颜色值混合，得到新的颜色值</p><table><thead><tr><th style="text-align:left;">属性</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">blending（融合）</td><td style="text-align:left;">标准融合方式，一般选择THREE.NormalBlending，这种模式下只显示材质的上层</td></tr><tr><td style="text-align:left;">blendsrc（融合源）</td><td style="text-align:left;">除了使用标准融合模式外，还可以使用blendsrc、blenddst、blendequation来创建自定义的融合模式。</td></tr><tr><td style="text-align:left;">blenddst（融合目标）</td><td style="text-align:left;">定义目标的融合方式，默认值THREE.OneMinusSrcAlphaFactor，即目标也使用源的alpha通道进行融合，只是使用的值是1</td></tr><tr><td style="text-align:left;">blendequation（融合公式）</td><td style="text-align:left;">定义如何使用blendsrc和blenddst的值。默认为使它们相加(AddEquation)</td></tr></tbody></table><h2 id="light光照" tabindex="-1"><a class="header-anchor" href="#light光照" aria-hidden="true">#</a> Light光照</h2><table><thead><tr><th style="text-align:left;">类型</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">THREE.AmbientLight</td><td style="text-align:left;">这是一个基本光源，该光源的颜色将会叠加到场景现有物体的颜色上。</td></tr><tr><td style="text-align:left;">THREE.PointLight</td><td style="text-align:left;">这是一个点光源，从空间的一点向所有方向发射光线，点光源无法创建阴影。</td></tr><tr><td style="text-align:left;">THREE.SpotLight</td><td style="text-align:left;">这是聚光灯，类似于台灯、吊灯或者手电筒，该光源可以产生阴影。</td></tr><tr><td style="text-align:left;">THREE.DirectionalLight</td><td style="text-align:left;">该光源被称之为无限光，该光源的光线是平行的，例如，太阳光线，该光源可以产生阴影。</td></tr><tr><td style="text-align:left;">THREE.HemisphereLigght</td><td style="text-align:left;">这是一个特殊的光源，可以通过模拟反光面，和光线微弱的天空，来创建出更加自然的室外光，该光源不提供阴影效果。</td></tr><tr><td style="text-align:left;">THREE.AreaLight</td><td style="text-align:left;">该光线可以指定散发光线的平面，而不是一点，该光源不提供阴影效果。</td></tr><tr><td style="text-align:left;">THREE.LensFlare</td><td style="text-align:left;">这不是光源，但是通过它可以为场景中的指定光源添加镜头光晕的效果。</td></tr></tbody></table><h4 id="ambientlight-环境全局光" tabindex="-1"><a class="header-anchor" href="#ambientlight-环境全局光" aria-hidden="true">#</a> AmbientLight 环境全局光</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>环境光会照亮场景中所有的物体，在计算物体的颜色的时候，都会叠加上环境光的颜色
由于环境光作用于所有的物体，所有的材质，所以环境光是没有方向的，也无法产生阴影效果

<span class="token comment">// 创建一个灰色的环境光</span>
<span class="token keyword">var</span> light <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>AmbientLight</span><span class="token punctuation">(</span> <span class="token number">0x404040</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
scene<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span> light <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="pointlight点光源" tabindex="-1"><a class="header-anchor" href="#pointlight点光源" aria-hidden="true">#</a> PointLight点光源</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>点光源就是从一个点的位置向四面八方发射出去光，一个简单的例子就是一个裸露的灯泡

<span class="token comment">//创建一个白色的点光源</span>
<span class="token keyword">var</span> pointLight <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>PointLight</span><span class="token punctuation">(</span><span class="token number">0xff0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
pointLight<span class="token punctuation">.</span>position<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">50</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
scene<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span> pointLight <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="spotlight聚光灯光源" tabindex="-1"><a class="header-anchor" href="#spotlight聚光灯光源" aria-hidden="true">#</a> SpotLight聚光灯光源</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>聚光灯光源的效果也是从一个点发出光线，然后沿着一个一个圆锥体进行照射，可以模仿手电筒，带有灯罩的灯泡等效果

<span class="token comment">//创建一个白色光照</span>
<span class="token keyword">var</span> spotLight <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>SpotLight</span><span class="token punctuation">(</span> <span class="token number">0xffffff</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> 
spotLight<span class="token punctuation">.</span>position<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">100</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
scene<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span> spotLight <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="directionallight平行光" tabindex="-1"><a class="header-anchor" href="#directionallight平行光" aria-hidden="true">#</a> DirectionalLight平行光</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>平行光是以特定的方向发射的光。它产生的光都是平行的状态，主要用于模拟太阳光线。
创建平行光也接受两个值，颜色和光线强度

<span class="token comment">//创建一个颜色为纯白色并且强度为默认的一半的平行光</span>
<span class="token keyword">var</span> directionalLight <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>DirectionalLight</span><span class="token punctuation">(</span> <span class="token number">0xffffff</span><span class="token punctuation">,</span> <span class="token number">0.5</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
directionalLight<span class="token punctuation">.</span>color<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">0x000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//将光照颜色修改为黑色</span>
directionalLight<span class="token punctuation">.</span>intensity <span class="token operator">=</span> <span class="token number">1.0</span><span class="token punctuation">;</span> <span class="token comment">//将光照强度修改为默认</span>

directionalLight<span class="token punctuation">.</span>position<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//设置平行光的位置</span>
directionalLight<span class="token punctuation">.</span>target<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//设置当前的平行光的朝向位置</span>
scene<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span> directionalLight <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="hemispherelight室外光源" tabindex="-1"><a class="header-anchor" href="#hemispherelight室外光源" aria-hidden="true">#</a> HemisphereLight室外光源</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>为了模拟在户外的环境光效果，比如在蓝天绿地的户外，模型下面会显示出来绿色的环境光，而上方则会受到蓝天的影响而颜色偏蓝。
实例化室外光源支持三个参数：天空的颜色，地面的颜色，和光的强度。

<span class="token comment">//添加户外光源</span>
<span class="token keyword">var</span> hemisphereLight <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>HemisphereLight</span><span class="token punctuation">(</span><span class="token number">0xffffbb</span><span class="token punctuation">,</span> <span class="token number">0x080820</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
scene<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>hemisphereLight<span class="token punctuation">)</span><span class="token punctuation">;</span>
hemisphereLight<span class="token punctuation">.</span>color<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">0xffffff</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//将天空颜色修改为白色</span>
hemisphereLight<span class="token punctuation">.</span>groundColor<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">0x000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//将地面颜色修改为黑色</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="camera相机" tabindex="-1"><a class="header-anchor" href="#camera相机" aria-hidden="true">#</a> Camera相机</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Threejs如果想把三维场景渲染到网页上，还需要定义一个虚拟相机Camera
就像你生活中想获得一张照片，需要一台用来拍照的相机
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th style="text-align:left;">名称</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">ArrayCamera</td><td style="text-align:left;">一般用于，展示一个场景存在多个物体，每个物体各自拥有自己的视角的这种场景</td></tr><tr><td style="text-align:left;">CubeCamera</td><td style="text-align:left;">一次性创建六个方位的相机（类似于正方体六个面，立方全景图中所有方位）</td></tr><tr><td style="text-align:left;">StereoCamera</td><td style="text-align:left;">立体相机，创建于类似于VR场景的，实现相机视角跟随鼠标的效果</td></tr><tr><td style="text-align:left;">OrthographyCamera</td><td style="text-align:left;">正交相机，用于创建没有透视场景的渲染效果。不会有近大远小的视觉差等效果</td></tr><tr><td style="text-align:left;">PerspectiveCamera</td><td style="text-align:left;">透视相机，用于模拟人眼场景的各种场景效果。会有近大远小的视觉差</td></tr></tbody></table><h4 id="透视投影摄像机-three-perspectivecamera" tabindex="-1"><a class="header-anchor" href="#透视投影摄像机-three-perspectivecamera" aria-hidden="true">#</a> 透视投影摄像机 THREE.PerspectiveCamera</h4><table><thead><tr><th style="text-align:left;">参数</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">fov</td><td style="text-align:left;">指的是垂直方向上的可视角度，一般建议设置在45-75之前，此值越大，物体看起来越小</td></tr><tr><td style="text-align:left;">aspect</td><td style="text-align:left;">长宽比</td></tr><tr><td style="text-align:left;">near(近面距离)</td><td style="text-align:left;">小于near的物体，不会被相机照到，推荐设置为 0.1</td></tr><tr><td style="text-align:left;">far(远面距离)</td><td style="text-align:left;">大于 near的物体，不会被相机照到</td></tr><tr><td style="text-align:left;">zoom(变焦)</td><td style="text-align:left;">该属性可以让你放大缩小场景，小于1缩小，大于1放大，负数的话上下会颠倒。推荐设置为 1</td></tr></tbody></table><p><img src="`+u+'" alt="PerspectiveCamera"></p><h4 id="正交投影摄像机-three-orthographiccamera" tabindex="-1"><a class="header-anchor" href="#正交投影摄像机-three-orthographiccamera" aria-hidden="true">#</a> 正交投影摄像机 THREE.OrthographicCamera</h4><table><thead><tr><th style="text-align:left;">参数</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">left</td><td style="text-align:left;">渲染空间的左边界</td></tr><tr><td style="text-align:left;">right</td><td style="text-align:left;">渲染空间的右边界</td></tr><tr><td style="text-align:left;">top</td><td style="text-align:left;">渲染空间的上边界</td></tr><tr><td style="text-align:left;">bottom</td><td style="text-align:left;">渲染空间的下边界</td></tr></tbody></table><p><img src="'+r+`" alt="OrthographicCamera"></p><h4 id="将摄像机聚焦在指定点" tabindex="-1"><a class="header-anchor" href="#将摄像机聚焦在指定点" aria-hidden="true">#</a> 将摄像机聚焦在指定点</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>我们使用camera.position.set(x, y, z)来设置摄像机的位置.

我们使用camera.lookAt(new THREE.Vector3(x, y, z))来改变摄像机的指向位置。

例如，指向场景中心：

camera.lookAt(scene.position)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="sprite精灵和points粒子" tabindex="-1"><a class="header-anchor" href="#sprite精灵和points粒子" aria-hidden="true">#</a> Sprite精灵和Points粒子</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>两种对象共同点就是我们通过相机查看它们时，始终看到的是它们的正面，它们总朝向相机。
通过它们的这种特性，我们可以实现广告牌的效果，或实现更多的比如雨雪、烟雾等更加绚丽的特效。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="sprite精灵" tabindex="-1"><a class="header-anchor" href="#sprite精灵" aria-hidden="true">#</a> Sprite精灵</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//一个最简单的精灵</span>
<span class="token keyword">var</span> spriteMaterial <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>SpriteMaterial</span><span class="token punctuation">(</span> <span class="token punctuation">{</span> <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token number">0xffffff</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> sprite <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>Sprite</span><span class="token punctuation">(</span> spriteMaterial <span class="token punctuation">)</span><span class="token punctuation">;</span>
scene<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span> sprite <span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//创建一个带有纹理图片的精灵</span>
<span class="token keyword">var</span> spriteMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>TextureLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span> <span class="token string">&quot;sprite.png&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> spriteMaterial <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>SpriteMaterial</span><span class="token punctuation">(</span> <span class="token punctuation">{</span> <span class="token literal-property property">map</span><span class="token operator">:</span> spriteMap<span class="token punctuation">,</span> <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token number">0xffffff</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> sprite <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>Sprite</span><span class="token punctuation">(</span> spriteMaterial <span class="token punctuation">)</span><span class="token punctuation">;</span>
scene<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span> sprite <span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//设置位置点处于精灵的最下方中间位置</span>
sprite<span class="token punctuation">.</span>center<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="points粒子" tabindex="-1"><a class="header-anchor" href="#points粒子" aria-hidden="true">#</a> Points粒子</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>粒子和精灵的效果是一样的，它们之间的区别就是如果当前场景内的精灵过多的话，就会出现性能问题。
粒子的作用就是为解决很多精灵而出现的，粒子可以被用来创建星星、烟雾、雨滴、灰尘、火焰等等。
我们可以使用合理的帧速率来创建数千个粒子，每个粒子都是始终面向摄影机的平面组成的。

创建粒子和创建网格很像，不同的是粒子使用的材质是点材质PointsMaterial和点实例Points
下面代码为例，当实例化球缓冲几何体时，该几何体的每个顶点都将成为粒子
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//创建粒子</span>
<span class="token keyword">const</span> particlesGeometry <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>SphereBufferGeometry</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> particlesMaterial <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>PointsMaterial</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token comment">//点的大小</span>
    <span class="token literal-property property">size</span><span class="token operator">:</span><span class="token number">0.02</span><span class="token punctuation">,</span>
    <span class="token comment">//开启尺寸衰减，当相机靠近时粒子变大，当相机远离时粒子变小</span>
    <span class="token literal-property property">sizeAttenuation</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">}</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> particles <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>Points</span><span class="token punctuation">(</span>particlesGeometry<span class="token punctuation">,</span>particlesMaterial<span class="token punctuation">)</span>
scene<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>particles<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="星空效果" tabindex="-1"><a class="header-anchor" href="#星空效果" aria-hidden="true">#</a> 星空效果</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//星空</span>
<span class="token keyword">var</span> starsGeometry <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>Geometry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//生成一万个点的位置</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> star <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>Vector3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//THREE.Math.randFloatSpread 在区间内随机浮动* - 范围 / 2 *到* 范围 / 2 *内随机取值。</span>
    star<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token constant">THREE</span><span class="token punctuation">.</span>Math<span class="token punctuation">.</span><span class="token function">randFloatSpread</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    star<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token constant">THREE</span><span class="token punctuation">.</span>Math<span class="token punctuation">.</span><span class="token function">randFloatSpread</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    star<span class="token punctuation">.</span>z <span class="token operator">=</span> <span class="token constant">THREE</span><span class="token punctuation">.</span>Math<span class="token punctuation">.</span><span class="token function">randFloatSpread</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    starsGeometry<span class="token punctuation">.</span>vertices<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>star<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> starsMaterial <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>PointsMaterial</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token number">0x888888</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> starField <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>Points</span><span class="token punctuation">(</span>starsGeometry<span class="token punctuation">,</span> starsMaterial<span class="token punctuation">)</span><span class="token punctuation">;</span>
scene<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>starField<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="three-pointsmaterial-粒子的纹理" tabindex="-1"><a class="header-anchor" href="#three-pointsmaterial-粒子的纹理" aria-hidden="true">#</a> THREE.PointsMaterial 粒子的纹理</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//如果我们需要设置粒子的样式，还是需要通过设置THREE.PointsMaterial属性实现：</span>
<span class="token keyword">var</span> pointsMaterial <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>PointsMaterial</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token number">0xff00ff</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//设置了粒子纹理的颜色</span>

<span class="token comment">//我们还可以通过PointsMaterial的size属性设置粒子的大小</span>
<span class="token comment">//粒子的尺寸改为原来的四倍</span>
<span class="token keyword">var</span> pointsMaterial <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>PointsMaterial</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token number">0xff00ff</span><span class="token punctuation">,</span> <span class="token literal-property property">size</span><span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token comment">//或者直接设置属性</span>
pointsMaterial<span class="token punctuation">.</span>size <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>

<span class="token comment">//默认粒子是不受光照的影响的，我们可以设置lights属性为true，让粒子受光照影响</span>
<span class="token keyword">var</span> pointsMaterial <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>PointsMaterial</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token number">0xff00ff</span><span class="token punctuation">,</span> <span class="token literal-property property">lights</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token comment">//或者</span>
pointsMaterial<span class="token punctuation">.</span>lights <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">//开启受光照影响</span>


<span class="token comment">//我们也可以设置粒子不受到距离的影响产生近大远小的效果</span>
<span class="token keyword">var</span> pointsMaterial <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>PointsMaterial</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token number">0xff00ff</span><span class="token punctuation">,</span> <span class="token literal-property property">sizeAttenuation</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token comment">//或者</span>
pointsMaterial<span class="token punctuation">.</span>sizeAttenuation <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">//关闭粒子的显示效果受距离影响</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="controls控制器" tabindex="-1"><a class="header-anchor" href="#controls控制器" aria-hidden="true">#</a> Controls控制器</h2><blockquote><p>官方源代码包里面提供了很多好用的控制器，文件夹地址：/examples/js/controls/</p></blockquote><table><thead><tr><th style="text-align:left;">控制器名称</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">DragControls</td><td style="text-align:left;">控制鼠标拖拽移动物体的功能</td></tr><tr><td style="text-align:left;">FirstPersonControls</td><td style="text-align:left;">第一人称视角相机控制器</td></tr><tr><td style="text-align:left;">OrbitControls</td><td style="text-align:left;">轨道控制器，可以使相机围绕目标进行轨道运动</td></tr><tr><td style="text-align:left;">PointerLockControls</td><td style="text-align:left;">鼠标锁定相机控制器，对于第一人称3D游戏来说， PointerLockControls 是一个非常完美的选择</td></tr><tr><td style="text-align:left;">TrackballControls</td><td style="text-align:left;">轨迹球控制器 透视相机使用的就是轨迹球控制器 TrackballControls 与 OrbitControls 相类似。然而，它不能恒定保持摄像机的up向量。 这意味着，如果摄像机绕过“北极”和“南极”，则不会翻转以保持“右侧朝上”。</td></tr><tr><td style="text-align:left;">TransformControls</td><td style="text-align:left;">控制模型位置，缩放，旋转的控制器</td></tr><tr><td style="text-align:left;">FlyControls</td><td style="text-align:left;">飞行相机控制器</td></tr><tr><td style="text-align:left;">DeviceOrientationControls</td><td style="text-align:left;">陀螺仪相机控制器，实现移动端陀螺仪控制相机</td></tr><tr><td style="text-align:left;">VRControls</td><td style="text-align:left;">实现VR双屏相机控制器</td></tr></tbody></table><h4 id="orbitcontrols" tabindex="-1"><a class="header-anchor" href="#orbitcontrols" aria-hidden="true">#</a> OrbitControls</h4><blockquote><p>使用OrbitControls控制器我们可以实现旋转，缩放，平移等功能</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> <span class="token constant">THREE</span> <span class="token keyword">from</span> <span class="token string">&quot;three&quot;</span>

<span class="token comment">// 引入控制器</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> OrbitControls <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;three/examples/jsm/controls/OrbitControls&quot;</span>

<span class="token comment">// 目标：使用控制器</span>
<span class="token comment">//创建场景</span>
<span class="token keyword">const</span> scene <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>Scene</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// 创建相机</span>
<span class="token comment">/*
    PerspectiveCamera( fov : Number, aspect : Number, near : Number, far : Number )
        fov — 摄像机视锥体垂直视野角度
        aspect — 摄像机视锥体长宽比
        near — 摄像机视锥体近端面
        far — 摄像机视锥体远端面
*/</span>
<span class="token comment">// 透视相机</span>
<span class="token keyword">const</span> camera <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>PerspectiveCamera</span><span class="token punctuation">(</span>
    <span class="token number">75</span><span class="token punctuation">,</span> <span class="token comment">// 摄像机视锥体垂直视野角度，从视图的底部到顶部，以角度来表示。默认值是50。</span>
    window<span class="token punctuation">.</span>innerWidth <span class="token operator">/</span> window<span class="token punctuation">.</span>innerHeight<span class="token punctuation">,</span> <span class="token comment">// 摄像机视锥体的长宽比，通常是使用画布的宽/画布的高。默认值是1（正方形画布）。</span>
    <span class="token number">0.1</span><span class="token punctuation">,</span> <span class="token comment">// 摄像机的近端面，默认值是0.1。</span>
    <span class="token number">1000</span> <span class="token comment">// 摄像机的远端面，默认值 2000</span>
<span class="token punctuation">)</span>


<span class="token comment">// 创建渲染器</span>
<span class="token keyword">const</span> renderer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>WebGLRenderer</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">antialias</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 开启抗锯齿</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 设置大小</span>
renderer<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span>
    <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token comment">// 宽度</span>
    <span class="token number">500</span> <span class="token comment">// 高度</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//挂载到页面</span>
document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>renderer<span class="token punctuation">.</span>domElement<span class="token punctuation">)</span>


<span class="token comment">// 添加控制器</span>
<span class="token keyword">const</span> controls <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OrbitControls</span><span class="token punctuation">(</span> camera<span class="token punctuation">,</span> renderer<span class="token punctuation">.</span>domElement <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 开启控制器的阻尼效果</span>
controls<span class="token punctuation">.</span>enableDamping <span class="token operator">=</span> <span class="token boolean">true</span>
<span class="token comment">// 使用控制器</span>
controls<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span>


<span class="token comment">// 添加物体</span>
<span class="token comment">/*
    width:立方体x轴的长度,
    height:立方体y轴的长度,
    depth:立方体z轴的长度也是深度
*/</span>
<span class="token keyword">let</span> geometry <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>BoxGeometry</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token comment">// 添加材质</span>
<span class="token comment">// const material = new THREE.MeshBasicMaterial({ color: 0xffff0000 });</span>

<span class="token comment">// 添加材质</span>
<span class="token keyword">const</span> materials <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    materials<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>MeshBasicMaterial</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">color</span><span class="token operator">:</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0x00ff0000</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>


<span class="token comment">// 添加网格</span>
<span class="token keyword">const</span> cube <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>Mesh</span><span class="token punctuation">(</span> geometry<span class="token punctuation">,</span> materials <span class="token punctuation">)</span><span class="token punctuation">;</span>
scene<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span> cube <span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 设置相机位置</span>
camera<span class="token punctuation">.</span>position<span class="token punctuation">.</span>z <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>

<span class="token comment">// 修改场景背景颜色</span>
scene<span class="token punctuation">.</span>background <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>Color</span><span class="token punctuation">(</span><span class="token number">0xffffcc99</span><span class="token punctuation">)</span>

<span class="token comment">// 添加 三色坐标轴</span>
<span class="token keyword">const</span> axesHelper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>AxesHelper</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>
scene<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span> axesHelper <span class="token punctuation">)</span>

<span class="token comment">// 渲染</span>
<span class="token keyword">function</span> <span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token comment">// 使用 requestAnimationFrame 执行动画</span>
    <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>animate<span class="token punctuation">)</span>

    controls<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token comment">//scene:前面定义的场景,camera:前面定义的相机</span>
    <span class="token comment">//renderTarget:渲染的目标默认是是渲染到前面定义的render变量中</span>
    <span class="token comment">//forceClear:每次绘制之前都将画布的内容给清除,即使自动清除标志autoClear为false,也会清除</span>
    renderer<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>scene<span class="token punctuation">,</span> camera<span class="token punctuation">)</span>
<span class="token punctuation">}</span>    

<span class="token comment">// 渲染</span>
<span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="loaders模型导入" tabindex="-1"><a class="header-anchor" href="#loaders模型导入" aria-hidden="true">#</a> Loaders模型导入</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>通过Three.js的材质和几何体，我们可以很方便的创建基础3D模型，但涉及到复杂模型时
一般是由专业建模工具生成模型文件再将模型引入到我们的3D场景中进行使用
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="three-js加载器" tabindex="-1"><a class="header-anchor" href="#three-js加载器" aria-hidden="true">#</a> Three.js加载器</h4><blockquote><p>Three.js提供多种加载器以支持市面上多种格式的3D文件导入操作</p></blockquote><table><thead><tr><th style="text-align:left;">加载器</th><th style="text-align:left;">支持文件格式</th></tr></thead><tbody><tr><td style="text-align:left;">3DMLoader</td><td style="text-align:left;">.3dm</td></tr><tr><td style="text-align:left;">DRACOLoader</td><td style="text-align:left;">.drc</td></tr><tr><td style="text-align:left;">FontLoader</td><td style="text-align:left;">.json</td></tr><tr><td style="text-align:left;">GLTFLoader</td><td style="text-align:left;">glTF（gl传输格式）是一种开放格式的规范 （open format specification）， 用于更高效地传输、加载3D内容。该类文件以JSON（.gltf）格式或二进制（.glb）格式提供， 外部文件存储贴图（.jpg、.png）和额外的二进制数据（.bin）</td></tr><tr><td style="text-align:left;">KTX2Loader</td><td style="text-align:left;">.ktx2</td></tr><tr><td style="text-align:left;">LDrawLoader</td><td style="text-align:left;">LDraw资源（一个文本文件，通常扩展名为.ldr、.dat或.txt）可以只描述单个构造件或整个模型。</td></tr><tr><td style="text-align:left;">MMDLoader</td><td style="text-align:left;">MMDLoader从MMD资源（例如PMD（.pmd）、PMX（.pmx）、VMD（,vmd）和VPD（.vpd）文件）中创建Three.js物体（对象）</td></tr><tr><td style="text-align:left;">MTLLoader</td><td style="text-align:left;">.mlt或.mlt与.obj的配套文件</td></tr><tr><td style="text-align:left;">OBJLoader</td><td style="text-align:left;">.obj</td></tr><tr><td style="text-align:left;">PCDLoader</td><td style="text-align:left;">.pcd</td></tr><tr><td style="text-align:left;">PDBLoader</td><td style="text-align:left;">.pdb</td></tr><tr><td style="text-align:left;">PRWMLoader</td><td style="text-align:left;">.prwm</td></tr><tr><td style="text-align:left;">SVGLoader</td><td style="text-align:left;">.svg</td></tr><tr><td style="text-align:left;">TGALoader</td><td style="text-align:left;">.tga</td></tr></tbody></table><h4 id="gltfloader" tabindex="-1"><a class="header-anchor" href="#gltfloader" aria-hidden="true">#</a> GLTFLoader</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>GLTFLoader是Three.js中用于加载GLTF格式模型的工具，GLTF是一种基于JSON的文件格式，可以包含模型、材质以及动画等信息。
GLTF格式是Three.js的建议格式。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> GLTFLoader <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;three/examples/jsm/loaders/GLTFLoader.js&#39;</span><span class="token punctuation">;</span>

<span class="token comment">// 实例化一个加载器</span>
<span class="token keyword">var</span> loader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GLTFLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 加载一个 glTF 资源</span>
loader<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string">&#39;../js/models/gltf/scene.gltf&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">gltf</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    gltf<span class="token punctuation">.</span>scene<span class="token punctuation">.</span>scale<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">.1</span><span class="token punctuation">,</span><span class="token number">.1</span><span class="token punctuation">,</span><span class="token number">.1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    scene<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>gltf<span class="token punctuation">.</span>scene<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="animation动画" tabindex="-1"><a class="header-anchor" href="#animation动画" aria-hidden="true">#</a> Animation动画</h2><h4 id="变形动画" tabindex="-1"><a class="header-anchor" href="#变形动画" aria-hidden="true">#</a> 变形动画</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//在模型加载成功以后，我们首先将模型创建出来，并将材质的morphTargets设置为ture，可以使用变形动画</span>
<span class="token keyword">var</span> loader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>JSONLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
loader<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string">&quot;../js/models/json/horse.js&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">geometry</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   mesh <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>Mesh</span><span class="token punctuation">(</span>geometry<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>MeshLambertMaterial</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
	    <span class="token literal-property property">vertexColors</span><span class="token operator">:</span> <span class="token constant">THREE</span><span class="token punctuation">.</span>FaceColors<span class="token punctuation">,</span>
	    <span class="token literal-property property">morphTargets</span><span class="token operator">:</span> <span class="token boolean">true</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	mesh<span class="token punctuation">.</span>castShadow <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
	mesh<span class="token punctuation">.</span>scale<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">,</span> <span class="token number">0.1</span><span class="token punctuation">,</span> <span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	scene<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>mesh<span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token comment">// 新建一个AnimationMixer, 并取得AnimationClip实例列表</span>
	<span class="token keyword">var</span> mixer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>AnimationMixer</span><span class="token punctuation">(</span> mesh <span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">var</span> clips <span class="token operator">=</span> mesh<span class="token punctuation">.</span>animations<span class="token punctuation">;</span>
	
	<span class="token comment">// 在每一帧中更新mixer</span>
	<span class="token keyword">function</span> <span class="token function">update</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	  mixer<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span> deltaSeconds <span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	
	<span class="token comment">// 播放一个特定的动画</span>
	<span class="token keyword">var</span> clip <span class="token operator">=</span> <span class="token constant">THREE</span><span class="token punctuation">.</span>AnimationClip<span class="token punctuation">.</span><span class="token function">findByName</span><span class="token punctuation">(</span> clips<span class="token punctuation">,</span> <span class="token string">&#39;dance&#39;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">var</span> action <span class="token operator">=</span> mixer<span class="token punctuation">.</span><span class="token function">clipAction</span><span class="token punctuation">(</span> clip <span class="token punctuation">)</span><span class="token punctuation">;</span>
	action<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token comment">// 播放所有动画</span>
	clips<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span> <span class="token keyword">function</span> <span class="token punctuation">(</span> <span class="token parameter">clip</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>
		mixer<span class="token punctuation">.</span><span class="token function">clipAction</span><span class="token punctuation">(</span> clip <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="骨骼动画" tabindex="-1"><a class="header-anchor" href="#骨骼动画" aria-hidden="true">#</a> 骨骼动画</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//创建gltf加载器</span>
<span class="token keyword">var</span> loader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>GLTFLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//骨骼动画模型我们使用的是gltf格式</span>
loader<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string">&#39;../js/models/gltf/marie/scene.gltf&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">gltf</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 设置模型位置大小</span>
    gltf<span class="token punctuation">.</span>scene<span class="token punctuation">.</span>scale<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">.1</span><span class="token punctuation">,</span> <span class="token number">.1</span><span class="token punctuation">,</span> <span class="token number">.1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    gltf<span class="token punctuation">.</span>scene<span class="token punctuation">.</span><span class="token function">traverse</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">child</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>child<span class="token punctuation">.</span>isMesh<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            child<span class="token punctuation">.</span>frustumCulled <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            child<span class="token punctuation">.</span>castShadow <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//将模型添加到场景中去</span>
    scene<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>gltf<span class="token punctuation">.</span>scene<span class="token punctuation">)</span><span class="token punctuation">;</span>

     <span class="token comment">//获取到模型对象</span>
    <span class="token keyword">var</span> obj <span class="token operator">=</span> gltf<span class="token punctuation">.</span>scene<span class="token punctuation">;</span>

    meshHelper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>SkeletonHelper</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//scene.add(meshHelper);</span>

    <span class="token comment">//通过当前模型创建混合器</span>
    mixer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>AnimationMixer</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//通过动画数据创建播放器</span>
    action <span class="token operator">=</span> mixer<span class="token punctuation">.</span><span class="token function">clipAction</span><span class="token punctuation">(</span>gltf<span class="token punctuation">.</span>animations<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//直接调用播放器的播放事件让动画播放</span>
    action<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 最后，我们还是需要在循环渲染中更新混合器，并将每一帧渲染的间隔时间传入</span>
<span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    control<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">var</span> time <span class="token operator">=</span> clock<span class="token punctuation">.</span><span class="token function">getDelta</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>mixer<span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        mixer<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    renderer<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>scene<span class="token punctuation">,</span> camera<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="各部分功能介绍" tabindex="-1"><a class="header-anchor" href="#各部分功能介绍" aria-hidden="true">#</a> 各部分功能介绍</h4><blockquote><p>Animation Clips：动画片段</p></blockquote><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>导入的对象中有一个数组为animations，该数组中储存的就是AnimationClip对象，每个AnimationClip通常保存对象某个活动的数据
假如mesh模型是一个角色，可能有一个AnimationClip实现步行循环，第二个AnimationClip实现跳跃，第三个AnimationClip实现闪避等
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>Keyframe Tracks：关键帧轨道</p></blockquote><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>每一个AnimationClip里面，所有的动作轨迹都储存在一个tracks数组中，tracks数组中每个动画的数据都是一个单独的KeyframeTrack
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>Animation Mixer：动画混合器</p></blockquote><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>存储的数据仅构成动画的基础 —— 实际播放由AnimationMixer控制
主要方法为：
mixer = new THREE.AnimationMixer(mesh); //通过mesh获取到AnimationMixer对象
mixer.clipAction(clip); //用clipAction方法生成可以控制执行动画的实例
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>Animation Actions：动画行为</p></blockquote><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>通过AnimationMixer生成AnimationAction实例
再通过配置AnimationAction，您可以决定何时播放、暂停或停止其中一个混合器中的某个AnimationClip
还有是否需要重复播放以及重复的频率，是否需要使用淡入淡出或时间缩放，以及一些其他内容
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>Animation Object Groups：动画对象组</p></blockquote><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>将AnimationClip对象加入组中，并将这个组对象作为根对象传递
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="threejs对动画的处理过程" tabindex="-1"><a class="header-anchor" href="#threejs对动画的处理过程" aria-hidden="true">#</a> Threejs对动画的处理过程</h4><blockquote><p>变形动画：导入geometry，geometry中包含morphTargets数据，threejs动画编辑器可以根据此数据编辑出动画片段</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token constant">THREE</span><span class="token punctuation">.</span>AnimationClip<span class="token punctuation">.</span><span class="token function">CreateFromMorphTargetSequence</span><span class="token punctuation">(</span><span class="token string">&#39;run&#39;</span><span class="token punctuation">,</span>geometry<span class="token punctuation">.</span>morphTargets<span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>骨骼蒙皮动画：导入一个包含animations数据的对象，根据此数据即可创建出动画片段</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token constant">THREE</span><span class="token punctuation">.</span>AnimationClip<span class="token punctuation">.</span><span class="token function">findByName</span><span class="token punctuation">(</span> clips<span class="token punctuation">,</span> <span class="token string">&#39;dance&#39;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="两种动画的区别" tabindex="-1"><a class="header-anchor" href="#两种动画的区别" aria-hidden="true">#</a> 两种动画的区别</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>变形动画主要用于精度要求高的动画，比如人物的面部表情。优点是动画表达会很到位，缺点就是扩展性不强，只能执行设置好的相关动画

骨骼动画主要用于那种精度要求低，而且需要丰富多样的动画，就比如人物的走动，攻击防御等动画
我们可以通过一套骨骼，修改相应骨骼的位置的信息直接实现相应的效果。确定是没有变形动画的精度高，但是可以实现多种多样的效果
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="tween-js补间动画" tabindex="-1"><a class="header-anchor" href="#tween-js补间动画" aria-hidden="true">#</a> Tween.js补间动画</h2>`,97),N={href:"https://github.com/tweenjs/tween.js/",target:"_blank",rel:"noopener noreferrer"},B=e(`<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Tween.js是一个可以产生平滑动画效果的js库，可以通过官方地址将源码下载后，可以在tween.js/dist/文件夹下找到相应的js代码
在HTML中进行引用，也可以通过npm命令在终端控制台中安装tween.js模块

npm install @tweenjs/tween.js
import * as TWEEN from &#39;@tweenjs/tween.js&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="使用tween补间动画" tabindex="-1"><a class="header-anchor" href="#使用tween补间动画" aria-hidden="true">#</a> 使用Tween补间动画</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//设置tween</span>
<span class="token keyword">var</span> position <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span><span class="token operator">-</span><span class="token number">40</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token literal-property property">z</span><span class="token operator">:</span><span class="token operator">-</span><span class="token number">30</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
tween <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TWEEN<span class="token punctuation">.</span>Tween</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//设置移动的目标和移动时间</span>
tween<span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span><span class="token number">40</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token literal-property property">z</span><span class="token operator">:</span><span class="token number">30</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//设置每次更新的回调，然后修改几何体的位置</span>
tween<span class="token punctuation">.</span><span class="token function">onUpdate</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">pos</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    cube<span class="token punctuation">.</span>position<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>pos<span class="token punctuation">.</span>x<span class="token punctuation">,</span> pos<span class="token punctuation">.</span>y<span class="token punctuation">,</span> pos<span class="token punctuation">.</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//Tween对象不会直接执行，需要我们去调用start()方法激活</span>
tween<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    <span class="token comment">//更新Tween</span>
    <span class="token constant">TWEEN</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    control<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    renderer<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>scene<span class="token punctuation">,</span> camera<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="常用补间方法" tabindex="-1"><a class="header-anchor" href="#常用补间方法" aria-hidden="true">#</a> 常用补间方法</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>开启补间动画 
<span class="token keyword">new</span> <span class="token class-name">TWEEN<span class="token punctuation">.</span>Tween</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span>

关闭补间动画 
<span class="token keyword">new</span> <span class="token class-name">TWEEN<span class="token punctuation">.</span>Tween</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

控制补间重复的次数 
<span class="token keyword">new</span> <span class="token class-name">TWEEN<span class="token punctuation">.</span>Tween</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

控制补间重复的模式
<span class="token keyword">new</span> <span class="token class-name">TWEEN<span class="token punctuation">.</span>Tween</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">yoyo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

控制补间开始前的延迟 
<span class="token keyword">new</span> <span class="token class-name">TWEEN<span class="token punctuation">.</span>Tween</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">delay</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

暂停补间动画 
<span class="token keyword">new</span> <span class="token class-name">TWEEN<span class="token punctuation">.</span>Tween</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pause</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

恢复补间动画 
<span class="token keyword">new</span> <span class="token class-name">TWEEN<span class="token punctuation">.</span>Tween</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">resume</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

控制补间的运动形式及方向 
<span class="token keyword">new</span> <span class="token class-name">TWEEN<span class="token punctuation">.</span>Tween</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5);function O(z,W){const a=l("ExternalLinkIcon");return o(),i("div",null,[k,n("table",null,[m,n("tbody",null,[n("tr",null,[v,n("td",b,[n("a",h,[s("https://sketchfab.com/"),t(a)])])]),n("tr",null,[g,n("td",f,[n("a",y,[s("https://www.3dxy.com/"),t(a)])])]),n("tr",null,[x,n("td",w,[n("a",E,[s("http://www.webgl3d.cn/"),t(a)])])]),n("tr",null,[T,n("td",j,[n("a",_,[s("https://threejs.org/"),t(a)])])]),n("tr",null,[H,n("td",L,[n("a",R,[s("https://techbrood.com/threejs/docs/"),t(a)])])]),n("tr",null,[M,n("td",C,[n("a",A,[s("https://blog.csdn.net/qq_30100043/category_9274092.html"),t(a)])])]),n("tr",null,[G,n("td",S,[n("a",q,[s("http://www.yanhuangxueyuan.com/"),t(a)])])])])]),P,n("p",null,[n("strong",null,[n("a",D,[s("https://github.com/dataarts/dat.gui"),t(a)])])]),F,n("blockquote",null,[n("p",null,[s("官方地址为："),n("a",N,[s("https://github.com/tweenjs/tween.js/"),t(a)])])]),B])}const J=p(d,[["render",O],["__file","base.html.vue"]]);export{J as default};

import{_ as n,o as a,c as s,a as e}from"./app-4841f850.js";const t={},i=e(`<h3 id="let关键字" tabindex="-1"><a class="header-anchor" href="#let关键字" aria-hidden="true">#</a> let关键字</h3><h4 id="作用" tabindex="-1"><a class="header-anchor" href="#作用" aria-hidden="true">#</a> 作用</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>声明变量，用来代替<span class="token keyword">var</span>
<span class="token keyword">let</span> 变量名 <span class="token operator">=</span> 值
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="特点" tabindex="-1"><a class="header-anchor" href="#特点" aria-hidden="true">#</a> 特点</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span>声明的变量不能重复声明
<span class="token keyword">let</span>声明的变量不会变量提升，由于<span class="token string">&quot;暂时性死区&quot;</span>的存在，如果在声明变量前去调用的话会抛出异常
<span class="token keyword">let</span>声明的变量不会再作为顶层全局的属性
<span class="token keyword">let</span>声明的变量在全局作用域和局部作用域的基础上新增了块级作用域
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span>

<span class="token punctuation">{</span>
  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">3</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// 3</span>
<span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="const关键字" tabindex="-1"><a class="header-anchor" href="#const关键字" aria-hidden="true">#</a> const关键字</h3><h4 id="作用-1" tabindex="-1"><a class="header-anchor" href="#作用-1" aria-hidden="true">#</a> 作用</h4><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>用于定义常量，常量的特点是值不能修改
为了与变量区分，一般常量名一般采用全部大写
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="特点-1" tabindex="-1"><a class="header-anchor" href="#特点-1" aria-hidden="true">#</a> 特点</h4><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>const声明的常量，不能重新赋值也不能重新声明
全局变量不会作为顶层全局对象的属性值
变量不会提升
常量在全局作用域和局部作用域的基础上新增了块级作用域
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="代码-1" tabindex="-1"><a class="header-anchor" href="#代码-1" aria-hidden="true">#</a> 代码</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token constant">ARR</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token constant">ARR</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">ARR</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [5,6,7]</span>
  <span class="token comment">//ARR = 10; // TypeError</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="模板语法和分隔符" tabindex="-1"><a class="header-anchor" href="#模板语法和分隔符" aria-hidden="true">#</a> 模板语法和分隔符</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token string">&#39;world&#39;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">hello </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>user<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">!</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span> <span class="token comment">// Hi world!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,16),c=[i];function l(p,o){return a(),s("div",null,c)}const r=n(t,[["render",l],["__file","03.html.vue"]]);export{r as default};

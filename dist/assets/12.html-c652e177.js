import{_ as p,r as o,o as c,c as l,b as n,d as s,e as t,a as e}from"./app-f25f351f.js";const i="/dist/assets/images/html5/eggjs/queue1.png",u="/dist/assets/images/html5/eggjs/queue2.png",r="/dist/assets/images/html5/eggjs/rabbit1.png",k="/dist/assets/images/html5/eggjs/rabbit2.png",d={},v=e(`<h3 id="rabbitmq" tabindex="-1"><a class="header-anchor" href="#rabbitmq" aria-hidden="true">#</a> RabbitMQ</h3><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>MQ 全称为Message Queue, 消息队列（MQ ）是一种应用程序对应用程序的通信方法。
应用程序通过读写出入队列的消息（针对应用程序的数据）来通信，而无需专用连接来链接它们。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="应用场景" tabindex="-1"><a class="header-anchor" href="#应用场景" aria-hidden="true">#</a> 应用场景</h3><h4 id="请参考下面的几篇文章" tabindex="-1"><a class="header-anchor" href="#请参考下面的几篇文章" aria-hidden="true">#</a> 请参考下面的几篇文章</h4>`,4),m={href:"https://zhuanlan.zhihu.com/p/240136633",target:"_blank",rel:"noopener noreferrer"},b={href:"https://www.cnblogs.com/zhao-yi/p/9299126.html",target:"_blank",rel:"noopener noreferrer"},h=e(`<h3 id="mac安装rabbitmq" tabindex="-1"><a class="header-anchor" href="#mac安装rabbitmq" aria-hidden="true">#</a> Mac安装RabbitMQ</h3><h4 id="利用homebrew安装" tabindex="-1"><a class="header-anchor" href="#利用homebrew安装" aria-hidden="true">#</a> 利用homebrew安装</h4><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>brew install rabbitmq
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="安装rabiitmq的可视化监控插件" tabindex="-1"><a class="header-anchor" href="#安装rabiitmq的可视化监控插件" aria-hidden="true">#</a> 安装RabiitMQ的可视化监控插件</h4><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token comment">// 切换到MQ目录,注意你的安装版本可能不是3.9.13</span>
cd /usr/local/Cellar/rabbitmq/<span class="token number">3.9</span>.<span class="token number">13</span>/

<span class="token comment">// 启用rabbitmq management插件</span>
sudo sbin/rabbitmq-plugins enable rabbitmq_management
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="配置环境变量-修改-profile" tabindex="-1"><a class="header-anchor" href="#配置环境变量-修改-profile" aria-hidden="true">#</a> 配置环境变量，修改 ~/.profile</h4><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>#rabbitmq消息队列图像管理工具
export RABBIT_HOME=/usr/local/Cellar/rabbitmq/<span class="token number">3.9</span>.<span class="token number">13</span>
export PATH=$PATH<span class="token operator">:</span>$RABBIT_HOME/sbin
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="立即生效" tabindex="-1"><a class="header-anchor" href="#立即生效" aria-hidden="true">#</a> 立即生效</h4><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>source ~/.profile
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="后台启动rabbitmq" tabindex="-1"><a class="header-anchor" href="#后台启动rabbitmq" aria-hidden="true">#</a> 后台启动rabbitMQ</h4><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>后台启动
sudo rabbitmq-server -detached
  
查看状态
sudo rabbitmqctl status

关闭
rabbitmqctl stop
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="访问可视化监控插件的界面" tabindex="-1"><a class="header-anchor" href="#访问可视化监控插件的界面" aria-hidden="true">#</a> 访问可视化监控插件的界面</h4><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>http<span class="token operator">:</span><span class="token comment">//localhost:15672</span>
默认的用户名密码都是guest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="eggjs中使用队列" tabindex="-1"><a class="header-anchor" href="#eggjs中使用队列" aria-hidden="true">#</a> Eggjs中使用队列</h3><h4 id="安装" tabindex="-1"><a class="header-anchor" href="#安装" aria-hidden="true">#</a> 安装</h4><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>npm i egg-amqplib --save
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="修改配置-config-plugin-js" tabindex="-1"><a class="header-anchor" href="#修改配置-config-plugin-js" aria-hidden="true">#</a> 修改配置 config/plugin.js</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//rabbitMQ消息队列配置</span>
<span class="token literal-property property">amqplib</span><span class="token operator">:</span> <span class="token punctuation">{</span>
	<span class="token literal-property property">enable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
	<span class="token keyword">package</span><span class="token operator">:</span> <span class="token string">&#39;egg-amqplib&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="config-config-default-js" tabindex="-1"><a class="header-anchor" href="#config-config-default-js" aria-hidden="true">#</a> config/config.default.js</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>exports<span class="token punctuation">.</span>amqplib <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">client</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// url: &#39;amqp://localhost&#39;,</span>
    <span class="token literal-property property">connectOptions</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">protocol</span><span class="token operator">:</span> <span class="token string">&#39;amqp&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">hostname</span><span class="token operator">:</span> <span class="token string">&#39;localhost&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">port</span><span class="token operator">:</span> <span class="token number">5672</span><span class="token punctuation">,</span>
      <span class="token literal-property property">username</span><span class="token operator">:</span> <span class="token string">&#39;guest&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">password</span><span class="token operator">:</span> <span class="token string">&#39;guest&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">locale</span><span class="token operator">:</span> <span class="token string">&#39;en_US&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">frameMax</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
      <span class="token literal-property property">heartbeat</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
      <span class="token literal-property property">vhost</span><span class="token operator">:</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">// socketOptions: {</span>
    <span class="token comment">//   cert: certificateAsBuffer, // client cert</span>
    <span class="token comment">//   key: privateKeyAsBuffer, // client key</span>
    <span class="token comment">//   passphrase: &#39;MySecretPassword&#39;, // passphrase for key</span>
    <span class="token comment">//   ca: [caCertAsBuffer], // array of trusted CA certs</span>
    <span class="token comment">// },</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="创建路由进行消息队列访问" tabindex="-1"><a class="header-anchor" href="#创建路由进行消息队列访问" aria-hidden="true">#</a> 创建路由进行消息队列访问</h3><h4 id="app-router-js" tabindex="-1"><a class="header-anchor" href="#app-router-js" aria-hidden="true">#</a> app/router.js</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/send&#39;</span><span class="token punctuation">,</span> controller<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>send<span class="token punctuation">)</span>
router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/work&#39;</span><span class="token punctuation">,</span> controller<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>work<span class="token punctuation">)</span>
router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/work1&#39;</span><span class="token punctuation">,</span> controller<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>work1<span class="token punctuation">)</span>
router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/work2&#39;</span><span class="token punctuation">,</span> controller<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>work2<span class="token punctuation">)</span>
router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/work3&#39;</span><span class="token punctuation">,</span> controller<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>work3<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="简单队列" tabindex="-1"><a class="header-anchor" href="#简单队列" aria-hidden="true">#</a> 简单队列</h3><p><img src="`+i+`" alt="queue"></p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>P 是我们的生产者
中间的框是一个队列<span class="token punctuation">,</span>代表消费者保留的消息缓冲区。
C 是我们的消费者
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="app-controller-demo-js" tabindex="-1"><a class="header-anchor" href="#app-controller-demo-js" aria-hidden="true">#</a> app/controller/demo.js</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&#39;use strict&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> Controller <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;egg&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Controller<span class="token punctuation">;</span>
<span class="token doc-comment comment">/**
 * 一对一队列演示
 */</span>

<span class="token comment">// 频道名称</span>
<span class="token keyword">const</span> queueName <span class="token operator">=</span> <span class="token string">&#39;demo&#39;</span>

<span class="token keyword">class</span> <span class="token class-name">DemoController</span> <span class="token keyword">extends</span> <span class="token class-name">Controller</span> <span class="token punctuation">{</span>

  <span class="token comment">// 生成者</span>
  <span class="token keyword">async</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 1. 获取要发送的消息</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> msg <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>ctx<span class="token punctuation">.</span>query
    <span class="token comment">// 2. 创建频道</span>
    <span class="token keyword">const</span> ch <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>app<span class="token punctuation">.</span>amqplib<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 3. 创建队列 durable 关闭持久化存储</span>
    <span class="token keyword">await</span> ch<span class="token punctuation">.</span><span class="token function">assertQueue</span><span class="token punctuation">(</span>queueName<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">durable</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 4. 发送消息</span>
    <span class="token keyword">const</span> ok <span class="token operator">=</span> <span class="token keyword">await</span> ch<span class="token punctuation">.</span><span class="token function">sendToQueue</span><span class="token punctuation">(</span>queueName<span class="token punctuation">,</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 5. 关闭连接</span>
    <span class="token keyword">await</span> ch<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">this</span><span class="token punctuation">.</span>ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> ok<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>ctx<span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 消费者</span>
  <span class="token keyword">async</span> <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 1. 创建频道</span>
    <span class="token keyword">const</span> ch <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>app<span class="token punctuation">.</span>amqplib<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 2. 选择队列</span>
    <span class="token keyword">await</span> ch<span class="token punctuation">.</span><span class="token function">assertQueue</span><span class="token punctuation">(</span>queueName<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">durable</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//3. 接收队列的消息</span>
    <span class="token keyword">const</span> resultMsg <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=&gt;</span> ch<span class="token punctuation">.</span><span class="token function">consume</span><span class="token punctuation">(</span>queueName<span class="token punctuation">,</span> <span class="token parameter">msg</span> <span class="token operator">=&gt;</span> <span class="token function">resolve</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">noAck</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 4. 显示消息内容</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>resultMsg <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      ch<span class="token punctuation">.</span><span class="token function">ack</span><span class="token punctuation">(</span>resultMsg<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">await</span> ch<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token keyword">const</span> <span class="token punctuation">{</span> content <span class="token punctuation">}</span> <span class="token operator">=</span> resultMsg<span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">msg</span><span class="token operator">:</span> content<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>

    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token string">&#39;队列消费失败&#39;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>ctx<span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token number">500</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> DemoController<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="用vscode的插件进行接口请求测试-rest-client" tabindex="-1"><a class="header-anchor" href="#用vscode的插件进行接口请求测试-rest-client" aria-hidden="true">#</a> 用vscode的插件进行接口请求测试(REST Client)</h3>`,29),g={id:"rest-client",tabindex:"-1"},y=n("a",{class:"header-anchor",href:"#rest-client","aria-hidden":"true"},"#",-1),w={href:"https://marketplace.visualstudio.com/items?itemName=humao.rest-client",target:"_blank",rel:"noopener noreferrer"},f=e(`<p>安装好之后，随便找一个目录，新建接口测试文件，文件命名为：<code>send.http</code> 消息队列的入列请求</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>GET http://localhost:7001/send?msg=hello
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="work-http-出列的请求" tabindex="-1"><a class="header-anchor" href="#work-http-出列的请求" aria-hidden="true">#</a> work.http 出列的请求</h4><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>GET http://localhost:7001/work
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="工作队列轮询分发" tabindex="-1"><a class="header-anchor" href="#工作队列轮询分发" aria-hidden="true">#</a> 工作队列轮询分发</h3><p><img src="`+u+`" alt="queue"></p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>简单队列是一对一的关系，一个生成者对应一个消费者
实际开发中，一般消费者是以业务相结合的，需要时间去处理业务
如果只有一个消费者，那么生产者就会积压很多消息，消费不出去
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="app-controller-demo2-js" tabindex="-1"><a class="header-anchor" href="#app-controller-demo2-js" aria-hidden="true">#</a> app/controller/demo2.js</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&#39;use strict&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> Controller <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;egg&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Controller<span class="token punctuation">;</span>
<span class="token doc-comment comment">/**
 * 队列一对多演示
 * 生产者 ----&gt;  队列 ----&gt; 消费者
 *                  ----&gt; 消费者
                    ----&gt; 消费者
 */</span>

<span class="token comment">// 频道名称</span>
<span class="token keyword">const</span> queueName <span class="token operator">=</span> <span class="token string">&#39;shop&#39;</span>

<span class="token keyword">class</span> <span class="token class-name">DemoController</span> <span class="token keyword">extends</span> <span class="token class-name">Controller</span> <span class="token punctuation">{</span>

  <span class="token comment">// 生成者</span>
  <span class="token keyword">async</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> msg <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>ctx<span class="token punctuation">.</span>query<span class="token punctuation">;</span>
    <span class="token comment">//1. 创建频道</span>
    <span class="token keyword">const</span> ch <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>app<span class="token punctuation">.</span>amqplib<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 2. 创建队列 开启持久化存储</span>
    <span class="token keyword">await</span> ch<span class="token punctuation">.</span><span class="token function">assertQueue</span><span class="token punctuation">(</span>queueName<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">durable</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 3. 发送消息</span>
    <span class="token keyword">let</span> ok <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">50</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 此时我们确信即使RabbitMQ重新启动，task_queue队列也不会丢失。现在我们需要将消息标记为持久性 - 通过使用持久性选项Channel.sendToQueue。</span>
      ok <span class="token operator">=</span> <span class="token keyword">await</span> ch<span class="token punctuation">.</span><span class="token function">sendToQueue</span><span class="token punctuation">(</span>queueName<span class="token punctuation">,</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>msg<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">persistent</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//4. 关闭连接</span>
    <span class="token keyword">await</span> ch<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">this</span><span class="token punctuation">.</span>ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> ok<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>ctx<span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 消费者</span>
  <span class="token keyword">async</span> <span class="token function">work1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token comment">// 1. 创建频道</span>
   <span class="token keyword">const</span> ch <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>app<span class="token punctuation">.</span>amqplib<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token comment">//2. 选择队列</span>
   <span class="token keyword">await</span> ch<span class="token punctuation">.</span><span class="token function">assertQueue</span><span class="token punctuation">(</span>queueName<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">durable</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token comment">// 3. 接收消息 noAck 关闭消息自动确认模式，需要手动 ack</span>
   <span class="token keyword">const</span> resultMsg <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=&gt;</span> ch<span class="token punctuation">.</span><span class="token function">consume</span><span class="token punctuation">(</span>queueName<span class="token punctuation">,</span> <span class="token parameter">msg</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>

    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">resolve</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span>
     <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span>

   <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">noAck</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

   <span class="token keyword">if</span> <span class="token punctuation">(</span>resultMsg <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> content <span class="token punctuation">}</span> <span class="token operator">=</span> resultMsg<span class="token punctuation">;</span>
     <span class="token comment">//消费者发回ack（nowledgement）告诉RabbitMQ已收到，处理了特定消息，RabbitMQ可以自由删除它</span>
    ch<span class="token punctuation">.</span><span class="token function">ack</span><span class="token punctuation">(</span>resultMsg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">await</span> ch<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">this</span><span class="token punctuation">.</span>ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">work1</span><span class="token operator">:</span> content<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>ctx<span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
     <span class="token keyword">this</span><span class="token punctuation">.</span>ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token string">&#39;消费者1号失败&#39;</span>
     <span class="token keyword">this</span><span class="token punctuation">.</span>ctx<span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token number">500</span>
   <span class="token punctuation">}</span>

  <span class="token punctuation">}</span>

  <span class="token keyword">async</span> <span class="token function">work2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token comment">// 1. 创建频道</span>
   <span class="token keyword">const</span> ch <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>app<span class="token punctuation">.</span>amqplib<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token comment">//2. 选择队列 RabbitMQ永远不会丢失我们的队列。为此，我们需要声明它是持久的</span>
   <span class="token keyword">await</span> ch<span class="token punctuation">.</span><span class="token function">assertQueue</span><span class="token punctuation">(</span>queueName<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">durable</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token comment">// 3. 接收消息 noAck 开启自动确认模式</span>
   <span class="token keyword">const</span> resultMsg <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=&gt;</span> ch<span class="token punctuation">.</span><span class="token function">consume</span><span class="token punctuation">(</span>queueName<span class="token punctuation">,</span> <span class="token parameter">msg</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">resolve</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span>
     <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>

   <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">noAck</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

   <span class="token keyword">if</span> <span class="token punctuation">(</span>resultMsg <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> content <span class="token punctuation">}</span> <span class="token operator">=</span> resultMsg<span class="token punctuation">;</span>
    ch<span class="token punctuation">.</span><span class="token function">ack</span><span class="token punctuation">(</span>resultMsg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">await</span> ch<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">this</span><span class="token punctuation">.</span>ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">work2</span><span class="token operator">:</span> content<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>ctx<span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
     <span class="token keyword">this</span><span class="token punctuation">.</span>ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token string">&#39;消费者2号失败&#39;</span>
     <span class="token keyword">this</span><span class="token punctuation">.</span>ctx<span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token number">500</span>
   <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">async</span> <span class="token function">work3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token comment">// 1. 创建频道</span>
   <span class="token keyword">const</span> ch <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>app<span class="token punctuation">.</span>amqplib<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token comment">//2. 选择队列</span>
   <span class="token keyword">await</span> ch<span class="token punctuation">.</span><span class="token function">assertQueue</span><span class="token punctuation">(</span>queueName<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">durable</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token comment">// 3. 接收消息 noAck 开启自动确认模式</span>
   <span class="token keyword">const</span> resultMsg <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=&gt;</span> ch<span class="token punctuation">.</span><span class="token function">consume</span><span class="token punctuation">(</span>queueName<span class="token punctuation">,</span> <span class="token parameter">msg</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>

    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">resolve</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span>
     <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1500</span><span class="token punctuation">)</span>


   <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">noAck</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>


   <span class="token keyword">if</span> <span class="token punctuation">(</span>resultMsg <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> content <span class="token punctuation">}</span> <span class="token operator">=</span> resultMsg<span class="token punctuation">;</span>
    <span class="token comment">//消费者发回ack（nowledgement）告诉RabbitMQ已收到，处理了特定消息，RabbitMQ可以自由删除它</span>
    ch<span class="token punctuation">.</span><span class="token function">ack</span><span class="token punctuation">(</span>resultMsg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">await</span> ch<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">this</span><span class="token punctuation">.</span>ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">work3</span><span class="token operator">:</span> content<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>ctx<span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
     <span class="token keyword">this</span><span class="token punctuation">.</span>ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token string">&#39;消费者3号失败&#39;</span>
     <span class="token keyword">this</span><span class="token punctuation">.</span>ctx<span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token number">500</span>
   <span class="token punctuation">}</span>
 
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> DemoController<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="利用上面同样的测试方式来测试-每次测试完之后可以去rabbitmq管理界面看一下效果" tabindex="-1"><a class="header-anchor" href="#利用上面同样的测试方式来测试-每次测试完之后可以去rabbitmq管理界面看一下效果" aria-hidden="true">#</a> 利用上面同样的测试方式来测试,每次测试完之后可以去rabbitMQ管理界面看一下效果</h4><p><img src="`+r+'" alt="queue"><img src="'+k+'" alt="queue"></p>',11);function x(j,q){const a=o("ExternalLinkIcon");return c(),l("div",null,[v,n("ul",null,[n("li",null,[n("a",m,[s("https://zhuanlan.zhihu.com/p/240136633"),t(a)])]),n("li",null,[n("a",b,[s("https://www.cnblogs.com/zhao-yi/p/9299126.html"),t(a)])])]),h,n("h4",g,[y,s(),n("a",w,[s("REST Client"),t(a)])]),f])}const M=p(d,[["render",x],["__file","12.html.vue"]]);export{M as default};

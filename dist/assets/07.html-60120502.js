import{_ as e,o as t,c as d,a}from"./app-3c87854f.js";const l={},i=a(`<h3 id="数据库迁移" tabindex="-1"><a class="header-anchor" href="#数据库迁移" aria-hidden="true">#</a> 数据库迁移</h3><p>迁移就像是数据库的版本控制, 允许团队简单轻松的编辑并共享应用的数据库表结构，迁移通常和 Laravel 的 数据库结构生成器配合使用，让你轻松地构建数据库结构。如果你曾经试过让同事手动在数据库结构中添加字段，那么数据库迁移可以让你不再需要做这样的事情。</p><p><code>Laravel</code> 的 <code>Schema</code>门面 对所有 <code>Laravel</code> 支持的数据库系统提供了创建和操作数据表的相应支持。</p><h3 id="生成迁移" tabindex="-1"><a class="header-anchor" href="#生成迁移" aria-hidden="true">#</a> 生成迁移</h3><p>使用 <code>Artisan</code>命令<code>make:migration</code> 来创建迁移。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>php artisan make:migration create_users_table
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>新的迁移位于 <code>database/migrations</code> 目录下。每个迁移文件名都包含时间戳，以便让 Laravel 确认迁移的顺序。</p><p><code>--table</code> 和 <code>--create</code> 选项可用来指定数据表的名称，或是该迁移被执行时是否将创建的新数据表。这些选项需在预生成迁移文件时填入指定的数据表：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>php artisan make:migration create_users_table --create=users

php artisan make:migration add_votes_to_users_table --table=users
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你想要指定生成迁移指定一个自定义输出路径，则可以在运行 <code>make:migration</code> 命令时添加 <code>--path</code> 选项，给定的路径必须是相对于应用程序的基本路径。</p><h3 id="迁移结构" tabindex="-1"><a class="header-anchor" href="#迁移结构" aria-hidden="true">#</a> 迁移结构</h3><p>迁移类通常会包含2个方法： <code>up</code> 和 <code>down</code>。 <code>up</code> 方法用于添加新的数据表， 字段或者索引到数据库， 而 <code>down</code> 方法就是 <code>up</code> 方法的反操作，和 <code>up</code> 里的操作相反。</p><p>在这2个方法中都要用到<code>Laravel</code> 的 <code>Schema</code> 构建器来创建和修改表，</p><p>若要了解 <code>Schema</code> 生成器中的所有可用方法 ，可以查看它的文档。比如，创建 <code>flights</code> 表的简单示例:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;?php

use Illuminate\\Support\\Facades\\Schema;
use Illuminate\\Database\\Schema\\Blueprint;
use Illuminate\\Database\\Migrations\\Migration;

class CreateFlightsTable extends Migration
{
    /**
     * 运行数据库迁移
     *
     * @return void
     */
    public function up()
    {
        Schema::create(&#39;flights&#39;, function (Blueprint $table) {
            $table-&gt;increments(&#39;id&#39;);
            $table-&gt;string(&#39;name&#39;);
            $table-&gt;string(&#39;airline&#39;);
            $table-&gt;timestamps();
        });
    }

    /**
     * 回滚数据库迁移
     *
     * @return void
     */
    public function down()
    {
        Schema::drop(&#39;flights&#39;);
    }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="运行迁移" tabindex="-1"><a class="header-anchor" href="#运行迁移" aria-hidden="true">#</a> 运行迁移</h3><p>使用 <code>Artisan</code>命令 <code>migrate</code> 方法来运行所有未完成的迁移：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>php artisan migrate
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="回滚迁移" tabindex="-1"><a class="header-anchor" href="#回滚迁移" aria-hidden="true">#</a> 回滚迁移</h3><p>若要回滚最后一次迁移， 可以使用 <code>rollback</code> 命令。 此命令将回滚最后一次<code>迁移</code>的操作，其中可能包含多个迁移文件：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>php artisan migrate:rollback
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>你可以在 <code>rollback</code> 命令后面加上 <code>step</code> 参数，来限制回滚迁移的个数。 例如，以下命令将回滚最近五次迁移：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>php artisan migrate:rollback --step=5
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>migrate:reset</code> 命令可以回滚应用程序中的所有迁移：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>php artisan migrate:reset
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="使用单个命令来执行回滚或迁移" tabindex="-1"><a class="header-anchor" href="#使用单个命令来执行回滚或迁移" aria-hidden="true">#</a> 使用单个命令来执行回滚或迁移</h3><p><code>migrate:refresh</code> 命令不仅会回滚数据库的所有迁移还会接着运行 <code>migrate</code> 命令。 这个命令可以高效地重建整个数据库：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>php artisan migrate:refresh 

// 刷新数据库结构并执行数据填充
php artisan migrate:refresh --seed
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <code>refresh</code> 命令并提供 <code>step</code> 参数来回滚并再执行最后指定的迁移数。例如， 以下命令将回滚并重新执行最后五次迁移：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>php artisan migrate:refresh --step=5
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="删除所有表-迁移" tabindex="-1"><a class="header-anchor" href="#删除所有表-迁移" aria-hidden="true">#</a> 删除所有表 &amp; 迁移</h3><p><code>migrate:fresh</code> 命令会从数据库中删除所有表，然后执行 <code>migrate</code> 命令:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>php artisan migrate:fresh

php artisan migrate:fresh --seed
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="创建数据表" tabindex="-1"><a class="header-anchor" href="#创建数据表" aria-hidden="true">#</a> 创建数据表</h3><p>可以使用 <code>Schema</code> facade的 <code>create</code> 方法来创建新的数据库表。 <code>create</code> 方法接受两个参数：第一个参数为数据表的名称，第二个参数是 <code>Closure</code> ，此闭包会接收一个用于定义新数据表的 <code>Blueprint</code> 对象：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Schema::create(&#39;users&#39;, function (Blueprint $table) {
    $table-&gt;increments(&#39;id&#39;);
});
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然，在创建数据表的时候，可以使用任何数据库结构生成器的 <code>字段方法</code> 来定义数据表的字段。</p><h3 id="检查数据表-字段是否存在" tabindex="-1"><a class="header-anchor" href="#检查数据表-字段是否存在" aria-hidden="true">#</a> 检查数据表 / 字段是否存在</h3><p>可以使用 <code>hasTable</code> 和 <code>hasColumn</code> 方法来检查数据表或字段是否存在：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>if (Schema::hasTable(&#39;users&#39;)) {
    //
}

if (Schema::hasColumn(&#39;users&#39;, &#39;email&#39;)) {
    //
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="数据库连接-表选项" tabindex="-1"><a class="header-anchor" href="#数据库连接-表选项" aria-hidden="true">#</a> 数据库连接 &amp; 表选项</h3><p>如果要对非默认连接的数据库连接执行结构操作，可以使用 <code>connection</code> 方法：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Schema::connection(&#39;foo&#39;)-&gt;create(&#39;users&#39;, function (Blueprint $table) {
    $table-&gt;increments(&#39;id&#39;);
});
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你可以在数据库结构生成器上使用以下命令来定义表的选项：</p><table><thead><tr><th style="text-align:left;">命令</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">$table-&gt;engine = &#39;InnoDB&#39;;</td><td style="text-align:left;">指定表存储引擎 (MySQL)。</td></tr><tr><td style="text-align:left;">$table-&gt;charset = &#39;utf8&#39;;</td><td style="text-align:left;">指定数据表的默认字符集 (MySQL)。</td></tr><tr><td style="text-align:left;">$table-&gt;collation = &#39;utf8_unicode_ci&#39;;</td><td style="text-align:left;">指定数据表默认的排序规则 (MySQL)。</td></tr><tr><td style="text-align:left;">$table-&gt;temporary();</td><td style="text-align:left;">创建临时表 (不支持SQL Server)。</td></tr></tbody></table><h3 id="重命名-删除数据表" tabindex="-1"><a class="header-anchor" href="#重命名-删除数据表" aria-hidden="true">#</a> 重命名 / 删除数据表</h3><p>若要重命名数据表，可以使用 <code>rename</code> 方法：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Schema::rename($from, $to);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>删除数据表， 可使用 <code>drop</code> 或 <code>dropIfExists</code> 方法：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Schema::drop(&#39;users&#39;);

Schema::dropIfExists(&#39;users&#39;);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="创建字段" tabindex="-1"><a class="header-anchor" href="#创建字段" aria-hidden="true">#</a> 创建字段</h3><p>使用 <code>Schema facade</code> 的 <code>table</code> 方法可以更新现有的数据表。如同 <code>create</code> 方法一样，<code>table</code> 方法会接受两个参数：一个是数据表的名称，另一个则是接收可以用来向表中添加字段的 <code>Blueprint</code> 实例的闭包：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Schema::table(&#39;users&#39;, function (Blueprint $table) {
    $table-&gt;string(&#39;email&#39;);
});
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="可用的字段类型" tabindex="-1"><a class="header-anchor" href="#可用的字段类型" aria-hidden="true">#</a> 可用的字段类型</h3><p>数据库结构生成器包含构建表时可以指定的各种字段类型：</p><table><thead><tr><th style="text-align:left;">Command</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;">$table-&gt;bigIncrements(&#39;id&#39;);</td><td style="text-align:left;">递增 ID（主键），相当于「UNSIGNED BIG INTEGER」</td></tr><tr><td style="text-align:left;">$table-&gt;bigInteger(&#39;votes&#39;);</td><td style="text-align:left;">相当于 BIGINT</td></tr><tr><td style="text-align:left;">$table-&gt;binary(&#39;data&#39;);</td><td style="text-align:left;">相当于 BLOB</td></tr><tr><td style="text-align:left;">$table-&gt;boolean(&#39;confirmed&#39;);</td><td style="text-align:left;">相当于 BOOLEAN</td></tr><tr><td style="text-align:left;">$table-&gt;char(&#39;name&#39;, 100);</td><td style="text-align:left;">相当于带有长度的 CHAR</td></tr><tr><td style="text-align:left;">$table-&gt;date(&#39;created_at&#39;);</td><td style="text-align:left;">相当于 DATE</td></tr><tr><td style="text-align:left;">$table-&gt;dateTime(&#39;created_at&#39;);</td><td style="text-align:left;">相当于 DATETIME</td></tr><tr><td style="text-align:left;">$table-&gt;dateTimeTz(&#39;created_at&#39;);</td><td style="text-align:left;">相当于带时区 DATETIME</td></tr><tr><td style="text-align:left;">$table-&gt;decimal(&#39;amount&#39;, 8, 2);</td><td style="text-align:left;">相当于带有精度与基数 DECIMAL</td></tr><tr><td style="text-align:left;">$table-&gt;double(&#39;amount&#39;, 8, 2);</td><td style="text-align:left;">相当于带有精度与基数 DOUBLE</td></tr><tr><td style="text-align:left;">$table-&gt;enum(&#39;level&#39;, [&#39;easy&#39;, &#39;hard&#39;]);</td><td style="text-align:left;">相当于 ENUM</td></tr><tr><td style="text-align:left;">$table-&gt;float(&#39;amount&#39;, 8, 2);</td><td style="text-align:left;">相当于带有精度与基数 FLOAT</td></tr><tr><td style="text-align:left;">$table-&gt;geometry(&#39;positions&#39;);</td><td style="text-align:left;">相当于 GEOMETRY</td></tr><tr><td style="text-align:left;">$table-&gt;geometryCollection(&#39;positions&#39;);</td><td style="text-align:left;">相当于 GEOMETRYCOLLECTION</td></tr><tr><td style="text-align:left;">$table-&gt;increments(&#39;id&#39;);</td><td style="text-align:left;">递增的 ID (主键)，相当于「UNSIGNED INTEGER」</td></tr><tr><td style="text-align:left;">$table-&gt;integer(&#39;votes&#39;);</td><td style="text-align:left;">相当于 INTEGER</td></tr><tr><td style="text-align:left;">$table-&gt;ipAddress(&#39;visitor&#39;);</td><td style="text-align:left;">相当于 IP 地址</td></tr><tr><td style="text-align:left;">$table-&gt;json(&#39;options&#39;);</td><td style="text-align:left;">相当于 JSON</td></tr><tr><td style="text-align:left;">$table-&gt;jsonb(&#39;options&#39;);</td><td style="text-align:left;">相当于 JSONB</td></tr><tr><td style="text-align:left;">$table-&gt;lineString(&#39;positions&#39;);</td><td style="text-align:left;">相当于 LINESTRING</td></tr><tr><td style="text-align:left;">$table-&gt;longText(&#39;description&#39;);</td><td style="text-align:left;">相当于 LONGTEXT</td></tr><tr><td style="text-align:left;">$table-&gt;macAddress(&#39;device&#39;);</td><td style="text-align:left;">相当于 MAC 地址</td></tr><tr><td style="text-align:left;">$table-&gt;mediumIncrements(&#39;id&#39;);</td><td style="text-align:left;">递增 ID (主键) ，相当于「UNSIGNED MEDIUM INTEGER」</td></tr><tr><td style="text-align:left;">$table-&gt;mediumInteger(&#39;votes&#39;);</td><td style="text-align:left;">相当于 MEDIUMINT</td></tr><tr><td style="text-align:left;">$table-&gt;mediumText(&#39;description&#39;);</td><td style="text-align:left;">相当于 MEDIUMTEXT</td></tr><tr><td style="text-align:left;">$table-&gt;morphs(&#39;taggable&#39;);</td><td style="text-align:left;">相当于加入递增的 taggable_id 与字符串 taggable_type</td></tr><tr><td style="text-align:left;">$table-&gt;multiLineString(&#39;positions&#39;);</td><td style="text-align:left;">相当于 MULTILINESTRING</td></tr><tr><td style="text-align:left;">$table-&gt;multiPoint(&#39;positions&#39;);</td><td style="text-align:left;">相当于 MULTIPOINT</td></tr><tr><td style="text-align:left;">$table-&gt;multiPolygon(&#39;positions&#39;);</td><td style="text-align:left;">相当于 MULTIPOLYGON</td></tr><tr><td style="text-align:left;">$table-&gt;nullableMorphs(&#39;taggable&#39;);</td><td style="text-align:left;">相当于可空版本的 morphs() 字段</td></tr><tr><td style="text-align:left;">$table-&gt;nullableTimestamps();</td><td style="text-align:left;">相当于可空版本的 timestamps() 字段</td></tr><tr><td style="text-align:left;">$table-&gt;point(&#39;position&#39;);</td><td style="text-align:left;">相当于 POINT</td></tr><tr><td style="text-align:left;">$table-&gt;polygon(&#39;positions&#39;);</td><td style="text-align:left;">相当于 POLYGON</td></tr><tr><td style="text-align:left;">$table-&gt;rememberToken();</td><td style="text-align:left;">相当于可空版本的 VARCHAR(100) 的 remember_token 字段</td></tr><tr><td style="text-align:left;">$table-&gt;smallIncrements(&#39;id&#39;);</td><td style="text-align:left;">递增 ID (主键) ，相当于「UNSIGNED SMALL INTEGER」</td></tr><tr><td style="text-align:left;">$table-&gt;smallInteger(&#39;votes&#39;);</td><td style="text-align:left;">相当于 SMALLINT</td></tr><tr><td style="text-align:left;">$table-&gt;softDeletes();</td><td style="text-align:left;">相当于为软删除添加一个可空的 deleted_at 字段</td></tr><tr><td style="text-align:left;">$table-&gt;softDeletesTz();</td><td style="text-align:left;">相当于为软删除添加一个可空的 带时区的 deleted_at 字段</td></tr><tr><td style="text-align:left;">$table-&gt;string(&#39;name&#39;, 100);</td><td style="text-align:left;">相当于带长度的 VARCHAR</td></tr><tr><td style="text-align:left;">$table-&gt;text(&#39;description&#39;);</td><td style="text-align:left;">相当于 TEXT</td></tr><tr><td style="text-align:left;">$table-&gt;time(&#39;sunrise&#39;);</td><td style="text-align:left;">相当于 TIME</td></tr><tr><td style="text-align:left;">$table-&gt;timeTz(&#39;sunrise&#39;);</td><td style="text-align:left;">相当于带时区的 TIME</td></tr><tr><td style="text-align:left;">$table-&gt;timestamp(&#39;added_on&#39;);</td><td style="text-align:left;">相当于 TIMESTAMP</td></tr><tr><td style="text-align:left;">$table-&gt;timestampTz(&#39;added_on&#39;);</td><td style="text-align:left;">相当于带时区的 TIMESTAMP</td></tr><tr><td style="text-align:left;">$table-&gt;timestamps();</td><td style="text-align:left;">相当于可空的 created_at 和 updated_at TIMESTAMP</td></tr><tr><td style="text-align:left;">$table-&gt;timestampsTz();</td><td style="text-align:left;">相当于可空且带时区的 created_at 和 updated_atTIMESTAMP</td></tr><tr><td style="text-align:left;">$table-&gt;tinyIncrements(&#39;id&#39;);</td><td style="text-align:left;">相当于自动递增 UNSIGNED TINYINT</td></tr><tr><td style="text-align:left;">$table-&gt;tinyInteger(&#39;votes&#39;);</td><td style="text-align:left;">相当于 TINYINT</td></tr><tr><td style="text-align:left;">$table-&gt;unsignedBigInteger(&#39;votes&#39;);</td><td style="text-align:left;">相当于 Unsigned BIGINT</td></tr><tr><td style="text-align:left;">$table-&gt;unsignedDecimal(&#39;amount&#39;, 8, 2);</td><td style="text-align:left;">相当于带有精度和基数的 UNSIGNED DECIMAL</td></tr><tr><td style="text-align:left;">$table-&gt;unsignedInteger(&#39;votes&#39;);</td><td style="text-align:left;">相当于 Unsigned INT</td></tr><tr><td style="text-align:left;">$table-&gt;unsignedMediumInteger(&#39;votes&#39;);</td><td style="text-align:left;">相当于 Unsigned MEDIUMINT</td></tr><tr><td style="text-align:left;">$table-&gt;unsignedSmallInteger(&#39;votes&#39;);</td><td style="text-align:left;">相当于 Unsigned SMALLINT</td></tr><tr><td style="text-align:left;">$table-&gt;unsignedTinyInteger(&#39;votes&#39;);</td><td style="text-align:left;">相当于 Unsigned TINYINT</td></tr><tr><td style="text-align:left;">$table-&gt;uuid(&#39;id&#39;);</td><td style="text-align:left;">相当于 UUID</td></tr><tr><td style="text-align:left;">$table-&gt;year(&#39;birth_year&#39;);</td><td style="text-align:left;">相当于 YEAR</td></tr></tbody></table><h3 id="字段修饰" tabindex="-1"><a class="header-anchor" href="#字段修饰" aria-hidden="true">#</a> 字段修饰</h3><p>除了上述列出的字段类型之外， 还有几个可以在添加字段时使用的 <code>修饰符</code> 。例如，如果要把字段设置为 <code>可空</code>，就使用 nullable 方法：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Schema::table(&#39;users&#39;, function (Blueprint $table) {
    $table-&gt;string(&#39;email&#39;)-&gt;nullable();
});
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以下是所有可用的字段修饰符的列表。此列表不包括 <code>索引修饰符</code>：</p><table><thead><tr><th style="text-align:left;">Modifier</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;">-&gt;after(&#39;column&#39;)</td><td style="text-align:left;">将此字段放置在其它字段 &quot;之后&quot; (MySQL)</td></tr><tr><td style="text-align:left;">-&gt;autoIncrement()</td><td style="text-align:left;">将 INTEGER 类型的字段设置为自动递增的主键</td></tr><tr><td style="text-align:left;">-&gt;charset(&#39;utf8&#39;)</td><td style="text-align:left;">指定一个字符集 (MySQL)</td></tr><tr><td style="text-align:left;">-&gt;collation(&#39;utf8_unicode_ci&#39;)</td><td style="text-align:left;">指定列的排序规则 (MySQL/SQL Server)</td></tr><tr><td style="text-align:left;">-&gt;comment(&#39;my comment&#39;)</td><td style="text-align:left;">为字段增加注释 (MySQL)</td></tr><tr><td style="text-align:left;">-&gt;default($value)</td><td style="text-align:left;">为字段指定 &quot;默认&quot; 值</td></tr><tr><td style="text-align:left;">-&gt;first()</td><td style="text-align:left;">将此字段放置在数据表的 &quot;首位&quot; (MySQL)</td></tr><tr><td style="text-align:left;">-&gt;nullable($value = true)</td><td style="text-align:left;">此字段允许写入 NULL 值（默认情况下）</td></tr><tr><td style="text-align:left;">-&gt;storedAs($expression)</td><td style="text-align:left;">创建一个存储生成的字段 (MySQL)</td></tr><tr><td style="text-align:left;">-&gt;unsigned()</td><td style="text-align:left;">设置 INTEGER 类型的字段为 UNSIGNED (MySQL)</td></tr><tr><td style="text-align:left;">-&gt;useCurrent()</td><td style="text-align:left;">将 TIMESTAMP 类型的字段设置为使用 CURRENT_TIMESTAMP 作为默认值</td></tr><tr><td style="text-align:left;">-&gt;virtualAs($expression)</td><td style="text-align:left;">创建一个虚拟生成的字段 (MySQL)</td></tr></tbody></table><h3 id="修改字段" tabindex="-1"><a class="header-anchor" href="#修改字段" aria-hidden="true">#</a> 修改字段</h3><p>在修改字段之前，请确保将 <code>doctrine/dbal</code> 依赖添加到 <code>composer.json</code> 文件中。<code>Doctrine DBAL</code> 库用于确定字段的当前状态， 并创建对该字段进行指定调整所需的 <code>SQL</code> 查询：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>composer require doctrine/dbal
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="更新字段属性" tabindex="-1"><a class="header-anchor" href="#更新字段属性" aria-hidden="true">#</a> 更新字段属性</h3><p><code>change</code> 方法可以将现有的字段类型修改为新的类型或修改属性。 比如，你可能想增加。字符串字段的长度，可以使用 <code>change</code> 方法把 <code>name</code> 字段的长度从 <code>25</code> 增加到 <code>50</code>：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Schema::table(&#39;users&#39;, function (Blueprint $table) {
    $table-&gt;string(&#39;name&#39;, 50)-&gt;change();
});
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们应该将字段修改为可空：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Schema::table(&#39;users&#39;, function (Blueprint $table) {
    $table-&gt;string(&#39;name&#39;, 50)-&gt;nullable()-&gt;change();
});
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>只有下面的字段类型能被 <code>修改</code></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>bigInteger、 binary、 boolean、date、dateTime、dateTimeTz、decimal、integer、
json、 longText、mediumText、smallInteger、string、text、time、 
unsignedBigInteger、unsignedInteger and unsignedSmallInteger。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="重命名字段" tabindex="-1"><a class="header-anchor" href="#重命名字段" aria-hidden="true">#</a> 重命名字段</h3><p>可以使用结构生成器上的 <code>renameColumn</code> 方法来重命名字段。在重命名字段前， 请确保你的 <code>composer.json</code> 文件内已经加入 <code>doctrine/dbal</code> 依赖：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Schema::table(&#39;users&#39;, function (Blueprint $table) {
    $table-&gt;renameColumn(&#39;from&#39;, &#39;to&#39;);
});
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>当前不支持 enum 类型的字段重命名。</p></blockquote><h3 id="删除字段" tabindex="-1"><a class="header-anchor" href="#删除字段" aria-hidden="true">#</a> 删除字段</h3><p>可以使用结构生成器上的 <code>dropColumn</code> 方法来删除字段。 在从 <code>SQLite</code> 数据库删除字段前，你需要在 <code>composer.json</code> 文件中加入<code>doctrine/dbal</code> 依赖并在终端执行 <code>composer update</code> 来安装该依赖：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Schema::table(&#39;users&#39;, function (Blueprint $table) {
    $table-&gt;dropColumn(&#39;votes&#39;);
});
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你可以传递一个字段数组给 <code>dropColumn</code> 方法来删除多个字段：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Schema::table(&#39;users&#39;, function (Blueprint $table) {
    $table-&gt;dropColumn([&#39;votes&#39;, &#39;avatar&#39;, &#39;location&#39;]);
});
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>不支持在使用 SQLite 数据库时在单个迁移中删除或修改多个字段。</p></blockquote><h3 id="可用的命令别名" tabindex="-1"><a class="header-anchor" href="#可用的命令别名" aria-hidden="true">#</a> 可用的命令别名</h3><p>每个索引方法都可以接收一个可选的第二个参数来指定索引的名称。 如果省略，名称将从表和列的名称派生。</p><table><thead><tr><th style="text-align:left;">Command</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;">$table-&gt;dropRememberToken();</td><td style="text-align:left;">删除 remember_token字段。</td></tr><tr><td style="text-align:left;">$table-&gt;dropSoftDeletes();</td><td style="text-align:left;">删除 deleted_at 字段。</td></tr><tr><td style="text-align:left;">$table-&gt;dropSoftDeletesTz();</td><td style="text-align:left;">dropSoftDeletes() 方法的别名</td></tr><tr><td style="text-align:left;">$table-&gt;dropTimestamps();</td><td style="text-align:left;">删除 created_at 和 updated_at 字段。</td></tr><tr><td style="text-align:left;">$table-&gt;dropTimestampsTz();</td><td style="text-align:left;">dropTimestamps() 方法的别名。</td></tr></tbody></table><h3 id="创建索引" tabindex="-1"><a class="header-anchor" href="#创建索引" aria-hidden="true">#</a> 创建索引</h3><p>结构生成器支持多种类型的索引。首先，先指定字段值唯一，即简单地在字段定义 之后链式调用 <code>unique</code> 方法来创建索引，例如：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>$table-&gt;string(&#39;email&#39;)-&gt;unique();
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>或者，你也可以在定义完字段之后创建索引。例如：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>$table-&gt;unique(&#39;email&#39;);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>你甚至可以将数组传递给索引方法来创建一个复合（或合成）索引：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>$table-&gt;index([&#39;account_id&#39;, &#39;created_at&#39;]);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Laravel 会自动生成一个合理的索引名称，但你也可以传递第二个参数来自定义索引名称：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>$table-&gt;unique(&#39;email&#39;, &#39;unique_email&#39;);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="可用的索引类型" tabindex="-1"><a class="header-anchor" href="#可用的索引类型" aria-hidden="true">#</a> 可用的索引类型</h3><table><thead><tr><th style="text-align:left;">命令</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">$table-&gt;primary(&#39;id&#39;);</td><td style="text-align:left;">添加主键</td></tr><tr><td style="text-align:left;">$table-&gt;primary([&#39;id&#39;, &#39;parent_id&#39;]);</td><td style="text-align:left;">添加复合键</td></tr><tr><td style="text-align:left;">$table-&gt;unique(&#39;email&#39;);</td><td style="text-align:left;">添加唯一索引</td></tr><tr><td style="text-align:left;">$table-&gt;index(&#39;state&#39;);</td><td style="text-align:left;">添加普通索引</td></tr><tr><td style="text-align:left;">$table-&gt;spatialIndex(&#39;location&#39;);</td><td style="text-align:left;">添加空间索引 ( SQLite 除外)</td></tr></tbody></table><h3 id="删除索引" tabindex="-1"><a class="header-anchor" href="#删除索引" aria-hidden="true">#</a> 删除索引</h3><p>若要移除索引， 则必须指定索引的名称。Laravel 默认会自动给索引分配合理的名称。其将数据表名称、索引的字段名称及索引类型简单地连接在了一起。举例如下：</p><table><thead><tr><th style="text-align:left;">命令</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">$table-&gt;dropPrimary(&#39;users_id_primary&#39;);</td><td style="text-align:left;">从 &quot;users&quot; 表中删除主键。</td></tr><tr><td style="text-align:left;">$table-&gt;dropUnique(&#39;users_email_unique&#39;);</td><td style="text-align:left;">从 &quot;users&quot; 表中删除唯一索引。</td></tr><tr><td style="text-align:left;">$table-&gt;dropIndex(&#39;geo_state_index&#39;);</td><td style="text-align:left;">从 &quot;geo&quot; 表中删除基本索引</td></tr><tr><td style="text-align:left;">$table-&gt;dropSpatialIndex(&#39;geo_location_spatialindex&#39;);</td><td style="text-align:left;">从 &quot;geo&quot; 表中删除空间索引 ( SQLite 除外).</td></tr></tbody></table><p>如果将字段数组传递给 <code>dropIndex</code> 方法，会删除根据表名、字段和键类型生成的索引名称：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Schema::table(&#39;geo&#39;, function (Blueprint $table) {
    $table-&gt;dropIndex([&#39;state&#39;]); // 删除索引 &#39;geo_state_index&#39;
});
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="外键约束" tabindex="-1"><a class="header-anchor" href="#外键约束" aria-hidden="true">#</a> 外键约束</h3><p>Laravel 还支持创建用于在数据库层中的强制引用完整性的外键约束。 例如，让我们在 <code>posts</code> 表上定义一个引用 <code>users</code> 表的 <code>id</code> 字段的 <code>user_id</code> 字段：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Schema::table(&#39;posts&#39;, function (Blueprint $table) {
    $table-&gt;integer(&#39;user_id&#39;)-&gt;unsigned();

    $table-&gt;foreign(&#39;user_id&#39;)-&gt;references(&#39;id&#39;)-&gt;on(&#39;users&#39;);
});
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还可以为约束的 <code>on delete</code> 和 <code>on update</code> 属性指定所需的操作：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>$table-&gt;foreign(&#39;user_id&#39;)
      -&gt;references(&#39;id&#39;)-&gt;on(&#39;users&#39;)
      -&gt;onDelete(&#39;cascade&#39;);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你可以使用 <code>dropForeign</code> 方法删除外键。外键约束采用的命名方式与索引相同。即，将数据表名称和约束的字段连接起来， 接着加上 <code>_foreign</code> 后缀：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>$table-&gt;dropForeign(&#39;posts_user_id_foreign&#39;);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>或者，你也可以传递一个字段数组，在删除的时候会按照约定自动转换为对应的外键名称：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>$table-&gt;dropForeign([&#39;user_id&#39;]);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>你可以在迁移文件里使用以下方法来开启或关闭外键约束：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Schema::enableForeignKeyConstraints();

Schema::disableForeignKeyConstraints();
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="数据填充" tabindex="-1"><a class="header-anchor" href="#数据填充" aria-hidden="true">#</a> 数据填充</h1><p><code>Laravel</code> 可以用 <code>seed</code> 类轻松地为数据库填充测试数据。所有的 <code>seed</code> 类都存放在 <code>database/seeds</code> 目录下。你可以任意为 <code>seed</code> 类命名，但是更应该遵守类似 <code>UsersTableSeeder</code> 的命名规范。<code>Laravel</code> 默认定义的一个 <code>DatabaseSeeder</code> 类。可以在这个类中使用 <code>call</code> 方法来运行其它的 <code>seed</code> 类从而控制数据填充的顺序。</p><h3 id="编写-seeders" tabindex="-1"><a class="header-anchor" href="#编写-seeders" aria-hidden="true">#</a> 编写 Seeders</h3><p>运行 <code>Artisan</code> 命令<code>make:seeder</code> 生成 <code>Seeder</code>。由框架生成的 <code>seeders</code> 都将被放置在 <code>database/seeds</code> 目录下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>php artisan make:seeder UsersTableSeeder
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在默认的 <code>DatabaseSeeder</code> 类中的 <code>run</code> 方法中添加一条数据插入语句：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;?php

use Illuminate\\Database\\Seeder;
use Illuminate\\Support\\Facades\\DB;

class DatabaseSeeder extends Seeder
{
    /**
     * 运行数据库填充。
     *
     * @return void
     */
    public function run()
    {
        DB::table(&#39;users&#39;)-&gt;insert([
            &#39;name&#39; =&gt; str_random(10),
            &#39;email&#39; =&gt; str_random(10).&#39;@gmail.com&#39;,
            &#39;password&#39; =&gt; bcrypt(&#39;secret&#39;),
        ]);
    }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用模型工厂" tabindex="-1"><a class="header-anchor" href="#使用模型工厂" aria-hidden="true">#</a> 使用模型工厂</h3><p>手动为每个模型填充指定属性很麻烦。作为替代方案，你可以使用 model 工厂 轻松地生成大量数据库数据。</p><p>例如，创建 50 个用户并为每个用户创建关联：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>/**
 * 运行数据库填充。
 *
 * @return void
 */
public function run()
{
    factory(App\\User::class, 50)-&gt;create()-&gt;each(function ($u) {
        $u-&gt;posts()-&gt;save(factory(App\\Post::class)-&gt;make());
    });
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="调用其它-seeders" tabindex="-1"><a class="header-anchor" href="#调用其它-seeders" aria-hidden="true">#</a> 调用其它 Seeders</h3><p>在 <code>DatabaseSeeder</code> 类中，你可以使用 <code>call</code> 方法来运行其它的 <code>seed</code> 类。使用 <code>call</code> 方法可以将数据填充拆分成多个文件，这样就不会使单个 <code>seeder</code> 变得非常大。只需简单传递要运行的 <code>seeder</code> 类名称即可：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>/**
 * 运行数据库 seeds。
 *
 * @return void
 */
public function run()
{
    $this-&gt;call([
        UsersTableSeeder::class,
        PostsTableSeeder::class,
        CommentsTableSeeder::class,
    ]);
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="运行-seeders" tabindex="-1"><a class="header-anchor" href="#运行-seeders" aria-hidden="true">#</a> 运行 Seeders</h3><p>完成 <code>seeder</code> 类的编写之后，你可能需要使用 <code>dump-autoload</code> 命令重新生成 <code>Composer</code> 的自动加载器：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>composer dump-autoload
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>接着就可以使用 <code>Artisan</code> 命令 <code>db:seed</code> 来填充数据库了。默认情况下，<code>db:seed</code> 命令将运行 <code>DatabaseSeeder</code>类，这个类可以用来调用其它 <code>Seed</code> 类。不过，你也可以使用 <code>--class</code> 选项来指定一个特定的 <code>seeder</code> 类：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>php artisan db:seed

php artisan db:seed --class=UsersTableSeeder
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你也可以使用 <code>migrate:refresh</code> 命令来填充数据库，该命令会回滚并重新运行所有迁移。这个命令可以用来重建数据库：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>php artisan migrate:refresh --seed
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,132),n=[i];function s(r,c){return t(),d("div",null,n)}const u=e(l,[["render",s],["__file","07.html.vue"]]);export{u as default};

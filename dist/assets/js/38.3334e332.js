(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{525:function(s,a,n){s.exports=n.p+"assets/img/node_event_loop.dd0f6c99.png"},698:function(s,a,n){"use strict";n.r(a);var e=n(4),t=Object(e.a)({},(function(){var s=this,a=s.$createElement,e=s._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h3",{attrs:{id:"基本介绍"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#基本介绍"}},[s._v("#")]),s._v(" 基本介绍")]),s._v(" "),e("div",{staticClass:"language-html line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-html"}},[e("code",[s._v("Node.js 是单进程单线程应用程序，通过事件和回调支持并发，所以性能非常高。\n\nNode.js 的每一个API都是异步的，并作为一个独立线程运行，使用异步函数调用，并处理并发。\n\nNode.js 基本上所有的事件机制都是用设计模式中观察者模式实现。\n\nNode.js 单线程类似进入一个while(true)的事件循环，直到没有事件观察者退出，\n\n每个异步事件都生成一个事件观察者，如果有事件发生就调用该回调函数.\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br")])]),e("h3",{attrs:{id:"事件循环机制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#事件循环机制"}},[s._v("#")]),s._v(" 事件循环机制")]),s._v(" "),e("div",{staticClass:"language-html line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-html"}},[e("code",[s._v("Node.js的事件循环是靠一个单线程不断地查询队列中是否有事件\n当读取到事件时，将调用与这个事件关联的回调函数\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("h3",{attrs:{id:"事件循环机制组成元素"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#事件循环机制组成元素"}},[s._v("#")]),s._v(" 事件循环机制组成元素")]),s._v(" "),e("div",{staticClass:"language-html line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-html"}},[e("code",[s._v("事件生产者：Node.js通过EventEmitter模块发送事件，发送的事件会被放到事件队列中\n\n事件队列：事件队列是一个FIFO模型，一端用于接收推入的事件，另外一端拉出要处理的事件\n\n事件循环：是一个单线程运行的任务，会不断轮询事件队列，并将轮询到的事件放到线程池中进行处理\n\n线程池：线程池是真正执行事件和任务处理的位置，比较耗时的操作如：网络I/O、文件操作I/O及其它会引起阻塞的操作都会在这里处理\n处理完成后，会调用事件对应的回调函数\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br")])]),e("p",[e("img",{attrs:{src:n(525),alt:"node_event_loop.png"}})])])}),[],!1,null,null,null);a.default=t.exports}}]);
import{_ as a,o as n,c as s,a as e}from"./app-1b1b276f.js";const i={},t=e(`<h3 id="javascript由以下三部分组成" tabindex="-1"><a class="header-anchor" href="#javascript由以下三部分组成" aria-hidden="true">#</a> JavaScript由以下三部分组成</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>ECMAScript（核心）：JavaScript 语言基础
<span class="token constant">DOM</span>（文档对象模型）：规定了访问<span class="token constant">HTML</span>和<span class="token constant">XML</span>的接口
<span class="token constant">BOM</span>（浏览器对象模型）：提供了浏览器窗口之间进行交互的对象和方法
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="js的基本数据类型和引用数据类型" tabindex="-1"><a class="header-anchor" href="#js的基本数据类型和引用数据类型" aria-hidden="true">#</a> JS的基本数据类型和引用数据类型</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>基本数据类型：<span class="token keyword">undefined</span>、<span class="token keyword">null</span>、boolean、number、string、symbol
引用数据类型：object、array、<span class="token keyword">function</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="检测浏览器版本版本有哪些方式" tabindex="-1"><a class="header-anchor" href="#检测浏览器版本版本有哪些方式" aria-hidden="true">#</a> 检测浏览器版本版本有哪些方式</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>根据 navigator<span class="token punctuation">.</span>userAgent <span class="token comment">// UA.toLowerCase().indexOf(&#39;chrome&#39;)</span>
根据 window 对象的成员 <span class="token comment">// &#39;ActiveXObject&#39; in window</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="介绍js有哪些内置对象" tabindex="-1"><a class="header-anchor" href="#介绍js有哪些内置对象" aria-hidden="true">#</a> 介绍JS有哪些内置对象</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>数据封装类对象：Object、Array、Boolean、Number、String
其他对象：Function、Arguments、Math、Date、RegExp、Error
<span class="token constant">ES6</span>新增对象：Symbol、Map、Set、Promises、Proxy、Reflect
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="说几条写javascript的基本规范" tabindex="-1"><a class="header-anchor" href="#说几条写javascript的基本规范" aria-hidden="true">#</a> 说几条写JavaScript的基本规范</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>代码缩进，建议使用“四个空格”缩进
代码段使用花括号<span class="token punctuation">{</span><span class="token punctuation">}</span>包裹
语句结束使用分号<span class="token punctuation">;</span>
变量和函数在使用前进行声明
以大写字母开头命名构造函数，全大写命名常量
规范定义<span class="token constant">JSON</span>对象，补全双引号
用<span class="token punctuation">{</span><span class="token punctuation">}</span>和<span class="token punctuation">[</span><span class="token punctuation">]</span>声明对象和数组
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="如何编写高性能的javascript" tabindex="-1"><a class="header-anchor" href="#如何编写高性能的javascript" aria-hidden="true">#</a> 如何编写高性能的JavaScript</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>遵循严格模式：<span class="token string">&quot;use strict&quot;</span><span class="token punctuation">;</span>
将js脚本放在页面底部，加快渲染页面
将js脚本将脚本成组打包，减少请求
使用非阻塞方式下载js脚本
尽量使用局部变量来保存全局变量
尽量减少使用闭包
使用 window 对象属性方法时，省略 window
尽量减少对象成员嵌套
缓存 <span class="token constant">DOM</span> 节点的访问  
通过避免使用 <span class="token function">eval</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 和 <span class="token function">Function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 构造器
给 <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 和 <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 传递函数而不是字符串作为参数
尽量使用直接量创建对象和数组
<span class="token function">最小化重绘</span><span class="token punctuation">(</span>repaint<span class="token punctuation">)</span><span class="token function">和回流</span><span class="token punctuation">(</span>reflow<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>描述浏览器的渲染过程，DOM树和渲染树的区别</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>浏览器的渲染过程：
	解析<span class="token constant">HTML</span>构建 <span class="token constant">DOM</span><span class="token punctuation">(</span><span class="token constant">DOM</span>树<span class="token punctuation">)</span>，并行请求 css<span class="token operator">/</span>image<span class="token operator">/</span>js
	<span class="token constant">CSS</span> 文件下载完成，开始构建 <span class="token constant">CSSOM</span><span class="token punctuation">(</span><span class="token constant">CSS</span>树<span class="token punctuation">)</span>
	<span class="token constant">CSSOM</span> 构建结束后，和 <span class="token constant">DOM</span> 一起生成 Render <span class="token function">Tree</span><span class="token punctuation">(</span>渲染树<span class="token punctuation">)</span>
	<span class="token function">布局</span><span class="token punctuation">(</span>Layout<span class="token punctuation">)</span>：计算出每个节点在屏幕中的位置
	<span class="token function">显示</span><span class="token punctuation">(</span>Painting<span class="token punctuation">)</span>：通过显卡把页面画到屏幕上

<span class="token constant">DOM</span>树 和 渲染树 的区别：
	<span class="token constant">DOM</span>树与<span class="token constant">HTML</span>标签一一对应，包括head和隐藏元素
	渲染树不包括head和隐藏元素，大段文本的每一个行都是独立节点，每一个节点都有对应的css属性
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="重绘和回流的区别和关系" tabindex="-1"><a class="header-anchor" href="#重绘和回流的区别和关系" aria-hidden="true">#</a> 重绘和回流的区别和关系</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>重绘：当渲染树中的元素外观（如：颜色）发生改变，不影响布局时，产生重绘
回流：当渲染树中的元素的布局（如：尺寸、位置、隐藏<span class="token operator">/</span>状态状态）发生改变时，产生重绘回流

注意：<span class="token constant">JS</span>获取Layout属性值（如：offsetLeft、scrollTop、getComputedStyle等）也会引起回流。
因为浏览器需要通过回流计算最新值

回流必将引起重绘，而重绘不一定会引起回流
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="如何最小化重绘和回流" tabindex="-1"><a class="header-anchor" href="#如何最小化重绘和回流" aria-hidden="true">#</a> 如何最小化重绘和回流</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">需要要对元素进行复杂的操作时，可以先隐藏</span><span class="token punctuation">(</span>display<span class="token operator">:</span><span class="token string">&quot;none&quot;</span><span class="token punctuation">)</span>，操作完成后再显示

需要创建多个<span class="token constant">DOM</span>节点时，使用DocumentFragment创建完后一次性的加入document

缓存Layout属性值，如：<span class="token keyword">var</span> left <span class="token operator">=</span> elem<span class="token punctuation">.</span>offsetLeft<span class="token punctuation">;</span> 这样，多次使用 left 只产生一次回流

尽量避免用table布局（table元素一旦触发回流就会导致table里所有的其它元素回流）

<span class="token function">避免使用css表达式</span><span class="token punctuation">(</span>expression<span class="token punctuation">)</span>，因为每次调用都会重新计算值（包括加载页面）

尽量使用 css 属性简写，如：用 border 代替 border<span class="token operator">-</span>width<span class="token punctuation">,</span> border<span class="token operator">-</span>style<span class="token punctuation">,</span> border<span class="token operator">-</span>color

批量修改元素样式：elem<span class="token punctuation">.</span>className 和 elem<span class="token punctuation">.</span>style<span class="token punctuation">.</span>cssText 代替 elem<span class="token punctuation">.</span>style<span class="token punctuation">.</span>xxx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="js的位置是否会影响首屏显示时间" tabindex="-1"><a class="header-anchor" href="#js的位置是否会影响首屏显示时间" aria-hidden="true">#</a> JS的位置是否会影响首屏显示时间</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>在解析 <span class="token constant">HTML</span> 生成 <span class="token constant">DOM</span> 过程中，js 文件的下载是并行的，不需要 <span class="token constant">DOM</span> 处理到 script 节点。
因此，script的位置不影响首屏显示的开始时间。

浏览器解析 <span class="token constant">HTML</span> 是自上而下的线性过程，script作为 <span class="token constant">HTML</span> 的一部分同样遵循这个原则
因此，script会延迟DomContentLoad，只显示其上部分首屏内容，从而影响首屏显示的完成时间

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="解释javascript中的作用域与变量声明提升" tabindex="-1"><a class="header-anchor" href="#解释javascript中的作用域与变量声明提升" aria-hidden="true">#</a> 解释JavaScript中的作用域与变量声明提升</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>JavaScript作用域：
	在Java、<span class="token constant">C</span>等语言中，作用域为<span class="token keyword">for</span>语句、<span class="token keyword">if</span>语句或<span class="token punctuation">{</span><span class="token punctuation">}</span>内的一块区域，称为作用域；
	而在 JavaScript 中，作用域为<span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>内的区域，称为函数作用域。
	
JavaScript变量声明提升：
	在JavaScript中，函数声明与变量声明经常被JavaScript引擎隐式地提升到当前作用域的顶部。
	声明语句中的赋值部分并不会被提升，只有名称被提升
	函数声明的优先级高于变量，如果变量名跟函数名相同且未赋值，则函数声明会覆盖变量声明
	如果函数有多个同名参数，那么最后一个参数（即使没有定义）会覆盖前面的同名参数
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="介绍javascript的原型-原型链-有什么特点" tabindex="-1"><a class="header-anchor" href="#介绍javascript的原型-原型链-有什么特点" aria-hidden="true">#</a> 介绍JavaScript的原型,原型链,有什么特点</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>原型：
	JavaScript的所有对象中都包含了一个 <span class="token punctuation">[</span>__proto__<span class="token punctuation">]</span> 内部属性，这个属性所对应的就是该对象的原型
	JavaScript的函数对象，除了原型 <span class="token punctuation">[</span>__proto__<span class="token punctuation">]</span> 之外，还预置了 prototype 属性
	当函数对象作为构造函数创建实例时，该 prototype 属性值将被作为实例对象的原型 <span class="token punctuation">[</span>__proto__<span class="token punctuation">]</span>。
	
原型链：
	当一个对象调用的属性<span class="token operator">/</span>方法自身不存在时，就会去自己 <span class="token punctuation">[</span>__proto__<span class="token punctuation">]</span> 关联的前辈 prototype 对象上去找
	如果没找到，就会去该 prototype 原型 <span class="token punctuation">[</span>__proto__<span class="token punctuation">]</span> 关联的前辈 prototype 去找。
	依次类推，直到找到属性<span class="token operator">/</span>方法或 <span class="token keyword">undefined</span> 为止。从而形成了所谓的“原型链”
	
原型特点：
	JavaScript对象是通过引用来传递的，当修改原型时，与之相关的对象也会继承这一改变
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="javascript有几种类型的值" tabindex="-1"><a class="header-anchor" href="#javascript有几种类型的值" aria-hidden="true">#</a> JavaScript有几种类型的值</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>原始数据类型（Undefined，Null，Boolean，Number、String）<span class="token operator">--</span> 栈
引用数据类型（对象、数组和函数）<span class="token operator">--</span> 堆

两种类型的区别是：存储位置不同：
<span class="token function">原始数据类型是直接存储在栈</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span>中的简单数据段，占据空间小、大小固定，属于被频繁使用数据；
<span class="token function">引用数据类型存储在堆</span><span class="token punctuation">(</span>heap<span class="token punctuation">)</span>中的对象，占据空间大、大小不固定，如果存储在栈中，将会影响程序运行的性能；
引用数据类型在栈中存储了指针，该指针指向堆中该实体的起始地址。
当解释器寻找引用值时，会首先检索其在栈中的地址，取得地址后从堆中获得实体。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="javascript如何实现一个类-怎么实例化这个类" tabindex="-1"><a class="header-anchor" href="#javascript如何实现一个类-怎么实例化这个类" aria-hidden="true">#</a> JavaScript如何实现一个类，怎么实例化这个类</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>构造函数法（<span class="token keyword">this</span> <span class="token operator">+</span> prototype） <span class="token operator">--</span> 用 <span class="token keyword">new</span> 关键字 生成实例对象
	缺点：用到了 <span class="token keyword">this</span> 和 prototype，编写复杂，可读性差
	
Object<span class="token punctuation">.</span>create 法 <span class="token operator">--</span> 用 Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 生成实例对象
	缺点：不能实现私有属性和私有方法，实例对象之间也不能共享数据 
	
极简主义法（消除 <span class="token keyword">this</span> 和 prototype） <span class="token operator">--</span> 调用 <span class="token function">createNew</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 得到实例对象
	优点：容易理解，结构清晰优雅，符合传统的<span class="token string">&quot;面向对象编程&quot;</span>的构造
<span class="token constant">ES6</span> 语法糖 <span class="token keyword">class</span> <span class="token operator">--</span> 用 <span class="token keyword">new</span> 关键字 生成实例对象
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="js如何实现继承" tabindex="-1"><a class="header-anchor" href="#js如何实现继承" aria-hidden="true">#</a> JS如何实现继承</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>构造函数绑定：使用 call 或 apply 方法，将父对象的构造函数绑定在子对象上
实例继承：将子对象的 prototype 指向父对象的一个实例
拷贝继承：如果把父对象的所有属性和方法，拷贝进子对象
原型继承：将子对象的 prototype 指向父对象的 prototype
<span class="token constant">ES6</span> 语法糖 <span class="token keyword">extends</span>：<span class="token keyword">class</span> <span class="token class-name">ColorPoint</span> <span class="token keyword">extends</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="谈谈this对象的理解" tabindex="-1"><a class="header-anchor" href="#谈谈this对象的理解" aria-hidden="true">#</a> 谈谈this对象的理解</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">this</span> 总是指向函数的直接调用者
如果有 <span class="token keyword">new</span> 关键字，<span class="token keyword">this</span> 指向 <span class="token keyword">new</span> 出来的实例对象
在事件中，<span class="token keyword">this</span>指向触发这个事件的对象
<span class="token constant">IE</span>下 attachEvent 中的<span class="token keyword">this</span>总是指向全局对象Window
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="在一个dom上同时绑定两个点击事件-一个用捕获-一个用冒泡。事件会执行几次-先执行冒泡还是捕获" tabindex="-1"><a class="header-anchor" href="#在一个dom上同时绑定两个点击事件-一个用捕获-一个用冒泡。事件会执行几次-先执行冒泡还是捕获" aria-hidden="true">#</a> 在一个DOM上同时绑定两个点击事件：一个用捕获，一个用冒泡。事件会执行几次，先执行冒泡还是捕获</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>该<span class="token constant">DOM</span>上的事件如果被触发，会执行两次（执行次数等于绑定次数）
如果该<span class="token constant">DOM</span>是目标元素，则按事件绑定顺序执行，不区分冒泡<span class="token operator">/</span>捕获
如果该<span class="token constant">DOM</span>是处于事件流中的非目标元素，则先执行捕获，后执行冒泡
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="ie与火狐的事件机制有什么区别-如何阻止冒泡" tabindex="-1"><a class="header-anchor" href="#ie与火狐的事件机制有什么区别-如何阻止冒泡" aria-hidden="true">#</a> IE与火狐的事件机制有什么区别？ 如何阻止冒泡</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token constant">IE</span>只事件冒泡，不支持事件捕获；火狐同时支持件冒泡和事件捕获
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="什么是闭包-closure-如何使用它-为什么要使用它" tabindex="-1"><a class="header-anchor" href="#什么是闭包-closure-如何使用它-为什么要使用它" aria-hidden="true">#</a> 什么是闭包 (closure)，如何使用它，为什么要使用它</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">闭包是指那些能够访问独立</span><span class="token punctuation">(</span>自由<span class="token punctuation">)</span><span class="token function">变量的函数</span> <span class="token punctuation">(</span>变量在本地使用，但定义在一个封闭的作用域中<span class="token punctuation">)</span>。
换句话说，这些函数可以“记忆”它被创建时候的环境。


通过js中函数拥有独立作用域的特性，在内部定义的变量不会被外部侵染，但是我们可以通过暴露接口，使外部可以访问，
以及修改，当外部引用此函数内部的变量的时候，这个函数是不会被销毁收回的。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="nodejs部分" tabindex="-1"><a class="header-anchor" href="#nodejs部分" aria-hidden="true">#</a> NodeJS部分</h2><h3 id="什么是promise" tabindex="-1"><a class="header-anchor" href="#什么是promise" aria-hidden="true">#</a> 什么是promise</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>用于管理与异步<span class="token constant">API</span>交互的抽象对象<span class="token punctuation">,</span>避免使用回调函数的层层嵌套
<span class="token literal-property property">状态</span><span class="token operator">:</span>等待<span class="token operator">-</span><span class="token operator">&gt;</span>完成<span class="token operator">-</span><span class="token operator">&gt;</span>拒绝
<span class="token function">必须有一个then</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>第一个参数是resolved<span class="token punctuation">,</span>第二个是rejected函数<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="什么是eventemitter" tabindex="-1"><a class="header-anchor" href="#什么是eventemitter" aria-hidden="true">#</a> 什么是EventEmitter</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>EventEmitter是node中一个实现观察者模式的类，主要功能是监听和发射消息，用于处理多模块交互问题
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="node中的异步和同步怎么理解" tabindex="-1"><a class="header-anchor" href="#node中的异步和同步怎么理解" aria-hidden="true">#</a> node中的异步和同步怎么理解</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>node是单线程的，异步是通过一次次的循环事件队列来实现的．
同步则是说阻塞式的<span class="token constant">IO</span><span class="token punctuation">,</span>这在高并发环境会是一个很大的性能问题，
所以同步一般只在基础框架的启动时使用，用来加载配置文件，初始化程序什么的
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="有哪些方法可以进行异步流程的控制" tabindex="-1"><a class="header-anchor" href="#有哪些方法可以进行异步流程的控制" aria-hidden="true">#</a> 有哪些方法可以进行异步流程的控制</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>多层嵌套回调 
为每一个回调写单独的函数，函数里边再回调 
用第三方框架比方async<span class="token punctuation">,</span> q<span class="token punctuation">,</span> promise等
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="怎样绑定node程序到80端口" tabindex="-1"><a class="header-anchor" href="#怎样绑定node程序到80端口" aria-hidden="true">#</a> 怎样绑定node程序到80端口</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>sudo 
apache<span class="token operator">/</span>nginx代理 
用操作系统的firewall iptables进行端口重定向
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="怎样调节node执行单元的内存大小" tabindex="-1"><a class="header-anchor" href="#怎样调节node执行单元的内存大小" aria-hidden="true">#</a> 怎样调节node执行单元的内存大小</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>用–max<span class="token operator">-</span>old<span class="token operator">-</span>space<span class="token operator">-</span>size 和 –max<span class="token operator">-</span><span class="token keyword">new</span><span class="token operator">-</span>space<span class="token operator">-</span>size 来设置 v8 使用内存的上限
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="程序总是崩溃-怎样找出问题在哪里" tabindex="-1"><a class="header-anchor" href="#程序总是崩溃-怎样找出问题在哪里" aria-hidden="true">#</a> 程序总是崩溃，怎样找出问题在哪里</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">1</span><span class="token punctuation">)</span> node –prof 查看哪些函数调用次数多 
<span class="token number">2</span><span class="token punctuation">)</span> memwatch和heapdump获得内存快照进行对比，查找内存溢出
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="有哪些常用方法可以防止程序崩溃" tabindex="-1"><a class="header-anchor" href="#有哪些常用方法可以防止程序崩溃" aria-hidden="true">#</a> 有哪些常用方法可以防止程序崩溃</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">try</span><span class="token operator">-</span>catch<span class="token operator">-</span>finally 
<span class="token number">2</span><span class="token punctuation">)</span> EventEmitter<span class="token operator">/</span>Stream error事件处理 
<span class="token number">3</span><span class="token punctuation">)</span> domain统一控制 
<span class="token number">4</span><span class="token punctuation">)</span> jshint静态检查 
<span class="token number">5</span><span class="token punctuation">)</span> jasmine<span class="token operator">/</span>mocha进行单元测试
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="怎样调试node程序" tabindex="-1"><a class="header-anchor" href="#怎样调试node程序" aria-hidden="true">#</a> 怎样调试node程序</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>node –debug app<span class="token punctuation">.</span>js 和node<span class="token operator">-</span>inspector
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="常用知名第三方类库-async-express等" tabindex="-1"><a class="header-anchor" href="#常用知名第三方类库-async-express等" aria-hidden="true">#</a> 常用知名第三方类库(Async, Express等)</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>说出四、五个可以
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="npm是什么" tabindex="-1"><a class="header-anchor" href="#npm是什么" aria-hidden="true">#</a> npm是什么</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>npm是nodejs包管理和分发的工具，用于管理node包。如安装、卸载、发布、查看等。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="npm的好处" tabindex="-1"><a class="header-anchor" href="#npm的好处" aria-hidden="true">#</a> npm的好处</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>通过npm，可以安装和管理项目的依赖，且可以指明依赖项的具体版本号
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="node-js中导入模块和导入js文件写法上有什么区别" tabindex="-1"><a class="header-anchor" href="#node-js中导入模块和导入js文件写法上有什么区别" aria-hidden="true">#</a> Node.js中导入模块和导入js文件写法上有什么区别</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Node<span class="token punctuation">.</span>js中导入模块和导入js文件写法上有什么区别
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="用nodejs-如何调用mysql数据库数据" tabindex="-1"><a class="header-anchor" href="#用nodejs-如何调用mysql数据库数据" aria-hidden="true">#</a> 用Nodejs 如何调用mysql数据库数据</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>可以使用模块node<span class="token operator">-</span>mysql<span class="token operator">-</span>promise所封装的数据库操作类 来链接数据库 做增删查改语句
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="vuejs-部分" tabindex="-1"><a class="header-anchor" href="#vuejs-部分" aria-hidden="true">#</a> VueJS 部分</h2><h3 id="请说下具体使用vue的理解" tabindex="-1"><a class="header-anchor" href="#请说下具体使用vue的理解" aria-hidden="true">#</a> 请说下具体使用vue的理解</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">1</span>、使用vue不必担心布局更改和类名重复导致的js重写，因为它是靠数据驱动双向绑定，
底层是通过Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 定义的数据 <span class="token keyword">set</span>、<span class="token keyword">get</span> 函数原理实现。

<span class="token number">2</span>、组件化开发，让项目的可拓展性、移植性更好，代码重用性更高，就好像农民工建房子，拿起自己的工具包就可以开工。
项目经理坐等收楼就好。

<span class="token number">3</span>、单页应用的体验零距离接触安卓原生应用，局部组件更新界面，让用户体验更快速省时。

<span class="token number">4</span>、js的代码无形的规范，团队合作开发代码可阅读性更高。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="你觉得哪些项目适合vue框架" tabindex="-1"><a class="header-anchor" href="#你觉得哪些项目适合vue框架" aria-hidden="true">#</a> 你觉得哪些项目适合vue框架</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>数据信息量比较多的，反之类似企业网站就无需此框架了。

手机web和app应用多端共用一套界面的项目，因为使用vue<span class="token punctuation">.</span>cli<span class="token operator">+</span>webpack后的前端目录，非常有利于项目的跨平台部署。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="怎么理解mvvm模式的这些框架" tabindex="-1"><a class="header-anchor" href="#怎么理解mvvm模式的这些框架" aria-hidden="true">#</a> 怎么理解MVVM模式的这些框架</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">1</span>、<span class="token constant">M</span>就是Model模型层，存的一个数据对象。
<span class="token number">2</span>、<span class="token constant">V</span>就是View视图层，所有的html节点在这一层。
<span class="token number">3</span>、<span class="token constant">VM</span>就是ViewModel，它通过data属性连接Model模型层，通过el属性连接View视图层。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="什么是vue生命周期" tabindex="-1"><a class="header-anchor" href="#什么是vue生命周期" aria-hidden="true">#</a> 什么是vue生命周期</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Vue 实例从创建到销毁的过程，就是生命周期。
也就是从开始创建、初始化数据、编译模板、挂载Dom→渲染、更新→渲染、卸载等一系列过程，我们称这是 Vue 的生命周期
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="vue生命周期的作用是什么" tabindex="-1"><a class="header-anchor" href="#vue生命周期的作用是什么" aria-hidden="true">#</a> vue生命周期的作用是什么</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>它的生命周期中有多个事件钩子，让我们在控制整个Vue实例的过程时更容易形成好的逻辑
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="vue生命周期总共有几个阶段" tabindex="-1"><a class="header-anchor" href="#vue生命周期总共有几个阶段" aria-hidden="true">#</a> vue生命周期总共有几个阶段</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>它可以总共分为<span class="token number">8</span>个阶段：创建前<span class="token operator">/</span>后<span class="token punctuation">,</span> 载入前<span class="token operator">/</span>后<span class="token punctuation">,</span>更新前<span class="token operator">/</span>后<span class="token punctuation">,</span>销毁前<span class="token operator">/</span>销毁后
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="第一次页面加载会触发哪几个钩子" tabindex="-1"><a class="header-anchor" href="#第一次页面加载会触发哪几个钩子" aria-hidden="true">#</a> 第一次页面加载会触发哪几个钩子</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>第一次页面加载时会触发 beforeCreate<span class="token punctuation">,</span> created<span class="token punctuation">,</span> beforeMount<span class="token punctuation">,</span> mounted 这几个钩子
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="dom-渲染在-哪个周期中就已经完成" tabindex="-1"><a class="header-anchor" href="#dom-渲染在-哪个周期中就已经完成" aria-hidden="true">#</a> DOM 渲染在 哪个周期中就已经完成</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token constant">DOM</span> 渲染在 哪个周期中就已经完成
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="简单描述每个周期具体适合哪些场景" tabindex="-1"><a class="header-anchor" href="#简单描述每个周期具体适合哪些场景" aria-hidden="true">#</a> 简单描述每个周期具体适合哪些场景</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>生命周期钩子的一些使用方法： 
<span class="token literal-property property">beforecreate</span> <span class="token operator">:</span> 可以在这加个loading事件，在加载实例时触发 
<span class="token literal-property property">created</span> <span class="token operator">:</span> 初始化完成时的事件写在这里，如在这结束loading事件，异步请求也适宜在这里调用 
<span class="token literal-property property">mounted</span> <span class="token operator">:</span> 挂载元素，获取到<span class="token constant">DOM</span>节点 
<span class="token literal-property property">updated</span> <span class="token operator">:</span> 如果对数据统一处理，在这里写上相应函数 
<span class="token literal-property property">beforeDestroy</span> <span class="token operator">:</span> 可以做一个确认停止事件的确认框 
<span class="token literal-property property">nextTick</span> <span class="token operator">:</span> 更新数据后立即操作dom
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="axios是什么-怎么使用-描述使用它实现登录功能的流程" tabindex="-1"><a class="header-anchor" href="#axios是什么-怎么使用-描述使用它实现登录功能的流程" aria-hidden="true">#</a> axios是什么？怎么使用？描述使用它实现登录功能的流程</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>请求后台资源的模块。npm install axios <span class="token operator">-</span><span class="token constant">S</span>装好，然后发送的是跨域，需在配置文件中config<span class="token operator">/</span>index<span class="token punctuation">.</span>js进行设置。
后台如果是Tp5则定义一个资源路由。
js中使用<span class="token keyword">import</span>进来axios，然后<span class="token punctuation">.</span>get或<span class="token punctuation">.</span>post。返回在<span class="token punctuation">.</span>then函数中如果成功，失败则是在<span class="token punctuation">.</span>catch函数中
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="axios-tp5进阶中-调用axios-post-api-user-是进行的什么操作-axios-put-api-user-8′-呢" tabindex="-1"><a class="header-anchor" href="#axios-tp5进阶中-调用axios-post-api-user-是进行的什么操作-axios-put-api-user-8′-呢" aria-hidden="true">#</a> axios+tp5进阶中，调用axios.post(‘api/user’)是进行的什么操作？axios.put(‘api/user/8′)呢</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>跨域，添加用户操作，更新操作
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="vuex是什么-怎么使用-哪种功能场景使用它" tabindex="-1"><a class="header-anchor" href="#vuex是什么-怎么使用-哪种功能场景使用它" aria-hidden="true">#</a> vuex是什么？怎么使用？哪种功能场景使用它？</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>vue框架中状态管理。在main<span class="token punctuation">.</span>js引入store，注入。新建了一个目录store，…<span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">export</span> 。
场景有：单页应用中，组件之间的状态。音乐播放、登录状态、加入购物车
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="说出至少4种vue当中的指令和它的用法" tabindex="-1"><a class="header-anchor" href="#说出至少4种vue当中的指令和它的用法" aria-hidden="true">#</a> 说出至少4种vue当中的指令和它的用法？</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>v<span class="token operator">-</span><span class="token keyword">if</span>：判断是否隐藏；
v<span class="token operator">-</span><span class="token keyword">for</span>：数据循环出来；
v<span class="token operator">-</span>bind<span class="token operator">:</span><span class="token keyword">class</span>：绑定一个属性；
v<span class="token operator">-</span>model：实现双向绑定
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="自定义指令-v-check、v-focus-的方法有哪些-它有哪些钩子函数-还有哪些钩子函数参数" tabindex="-1"><a class="header-anchor" href="#自定义指令-v-check、v-focus-的方法有哪些-它有哪些钩子函数-还有哪些钩子函数参数" aria-hidden="true">#</a> 自定义指令（v-check、v-focus）的方法有哪些？它有哪些钩子函数？还有哪些钩子函数参数？</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>全局定义指令：在vue对象的directive方法里面有两个参数，一个是指令名称，另外一个是函数。
组件内定义指令：directives

<span class="token function">钩子函数：bind（绑定事件触发）、inserted</span><span class="token punctuation">(</span>节点插入的时候触发<span class="token punctuation">)</span>、update（组件内相关更新）
钩子函数参数：el、binding
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="vue-router是什么-它有哪些组件" tabindex="-1"><a class="header-anchor" href="#vue-router是什么-它有哪些组件" aria-hidden="true">#</a> vue-router是什么？它有哪些组件？</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>vue用来写路由一个插件。router<span class="token operator">-</span>link、router<span class="token operator">-</span>view
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="vue的双向数据绑定原理是什么" tabindex="-1"><a class="header-anchor" href="#vue的双向数据绑定原理是什么" aria-hidden="true">#</a> Vue的双向数据绑定原理是什么</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>vue<span class="token punctuation">.</span>js 是采用数据劫持结合发布者<span class="token operator">-</span>订阅者模式的方式，
通过Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span><span class="token punctuation">)</span>来劫持各个属性的setter，getter，
在数据变动时发布消息给订阅者，触发相应的监听回调
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="你是怎么认识vuex的" tabindex="-1"><a class="header-anchor" href="#你是怎么认识vuex的" aria-hidden="true">#</a> 你是怎么认识vuex的</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>uex可以理解为一种开发模式或框架。比如<span class="token constant">PHP</span>有thinkphp，java有spring等。

通过状态（数据源）集中管理驱动组件的变化（好比spring的<span class="token constant">IOC</span>容器对bean进行集中管理）。

应用级的状态集中放在store中； 改变状态的方式是提交mutations，这是个同步的事物； 

异步逻辑应该封装在action中。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="vue-loader是什么-使用它的用途有哪些" tabindex="-1"><a class="header-anchor" href="#vue-loader是什么-使用它的用途有哪些" aria-hidden="true">#</a> vue-loader是什么？使用它的用途有哪些？</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>解析<span class="token punctuation">.</span>vue文件的一个加载器，跟template<span class="token operator">/</span>js<span class="token operator">/</span>style转换成js模块。
用途：js可以写es6、style样式可以scss或less、template可以加jade等
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="请说出vue-cli项目中src目录每个文件夹和文件的用法" tabindex="-1"><a class="header-anchor" href="#请说出vue-cli项目中src目录每个文件夹和文件的用法" aria-hidden="true">#</a> 请说出vue.cli项目中src目录每个文件夹和文件的用法？</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>assets文件夹是放静态资源；
components是放组件；
router是定义路由相关的配置<span class="token punctuation">;</span>
view视图；
app<span class="token punctuation">.</span>vue是一个应用主组件；
main<span class="token punctuation">.</span>js是入口文件
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="webpack部分" tabindex="-1"><a class="header-anchor" href="#webpack部分" aria-hidden="true">#</a> WebPack部分</h2><h3 id="什么是webpack-webpack-与grunt-或者gulp有什么区别" tabindex="-1"><a class="header-anchor" href="#什么是webpack-webpack-与grunt-或者gulp有什么区别" aria-hidden="true">#</a> 什么是webpack ,webpack 与grunt 或者gulp有什么区别</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>webpack是一个模块打包器，他可以递归的打包项目中的所有模块，最终生成几个打包后的文件。
他和其他的工具最大的不同在于他支持code<span class="token operator">-</span>splitting（代码分割）<span class="token punctuation">,</span>模块化（<span class="token constant">AMD</span><span class="token punctuation">,</span><span class="token constant">ESM</span><span class="token punctuation">,</span>CommonJs），全局解析。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="如何可以自动生成webpack配置" tabindex="-1"><a class="header-anchor" href="#如何可以自动生成webpack配置" aria-hidden="true">#</a> 如何可以自动生成webpack配置</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>如何可以自动生成webpack配置
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="如何可以自动生成webpack配置-1" tabindex="-1"><a class="header-anchor" href="#如何可以自动生成webpack配置-1" aria-hidden="true">#</a> 如何可以自动生成webpack配置</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>模块热更新，是webpack的一个功能，他可以使得代码通过修改过后，不用刷新浏览器就可以更新。是高级版的自动刷新浏览器
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="webpack中-你使用过哪些loader" tabindex="-1"><a class="header-anchor" href="#webpack中-你使用过哪些loader" aria-hidden="true">#</a> webpack中，你使用过哪些loader</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>style<span class="token operator">-</span>loader、css<span class="token operator">-</span>loader、url<span class="token operator">-</span>loader、file<span class="token operator">-</span>loader、sass<span class="token operator">-</span>loader
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="什么是bundle-什么是chunk-什么是module" tabindex="-1"><a class="header-anchor" href="#什么是bundle-什么是chunk-什么是module" aria-hidden="true">#</a> 什么是bundle,什么是chunk，什么是module?</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>bundle是由webpack打包出来的文件，chunk是指webpack在进行模块的依赖分析的时候，代码分割出来的代码块。
module是开发中的单个模块。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,117),d=[t];function c(r,l){return n(),s("div",null,d)}const o=a(i,[["render",c],["__file","gongsizhentidi1qi.html.vue"]]);export{o as default};

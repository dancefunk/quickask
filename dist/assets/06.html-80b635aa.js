import{_ as a,o as e,c as n,a as s}from"./app-1b1b276f.js";const d={},t=s(`<h3 id="查询数据" tabindex="-1"><a class="header-anchor" href="#查询数据" aria-hidden="true">#</a> 查询数据</h3><h1 id="使用mongo命令行查询数据" tabindex="-1"><a class="header-anchor" href="#使用mongo命令行查询数据" aria-hidden="true">#</a> 使用mongo命令行查询数据</h1><h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述" aria-hidden="true">#</a> 概述</h2><p>使用<code>find()</code>方法在MongoDB集合中查询数据。MongoDB所有的查询范围都是单个集合的。也就是说MongoDB不能跨集合查询数据。</p><p>查询可以返回集合中的所有文档，或者仅仅返回指定过滤条件的文档。你可以指定一个过滤条件或才一个判断条件作为参数传递给<code>find()</code>方法。</p><p><code>find()</code>方法在一个游标中返回所有的结果集，通过游标的迭代可以输出所有文档。</p><h2 id="查询集合中的所有文档" tabindex="-1"><a class="header-anchor" href="#查询集合中的所有文档" aria-hidden="true">#</a> 查询集合中的所有文档</h2><p>查询集合中的所有文档，直接调用集合的<code>find()</code>方法，不需要指定条件。如下命令查询<code>restaurants</code>中的所有文档。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>db.restaurants.find()
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>返回的结果集包含<code>restaurants</code>所有的文档。</p><h2 id="指定-等于-条件" tabindex="-1"><a class="header-anchor" href="#指定-等于-条件" aria-hidden="true">#</a> 指定&quot;等于&quot;条件</h2><p>查询条件如果是某个字段上的“等于”匹配的话，具有如下格式：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>{ <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>field1</span><span class="token punctuation">&gt;</span></span>: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value1</span><span class="token punctuation">&gt;</span></span>, <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>field2</span><span class="token punctuation">&gt;</span></span>: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value2</span><span class="token punctuation">&gt;</span></span>, ... }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果<code>&lt;field&gt;</code>是文档中的顶级字段，并不是内嵌的，也不是数组的话，你可以使用引号括住字段名，或者不使用引号。</p><p>如果<code>&lt;field&gt;</code>就文内嵌字段，或者是数组，使用“.”号访问字段。而且必要使用相号括住整个字段名。</p><h2 id="根据顶级字段查询" tabindex="-1"><a class="header-anchor" href="#根据顶级字段查询" aria-hidden="true">#</a> 根据顶级字段查询</h2><p>下面的命令查询所有<code>borough</code>字段值为&quot;Manhattan&quot;的文档。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>db.restaurants.find( { &quot;borough&quot;: &quot;Manhattan&quot; } )
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查询的结果集中仅包含匹配的文档。</p><h2 id="根据数组中的字段查询" tabindex="-1"><a class="header-anchor" href="#根据数组中的字段查询" aria-hidden="true">#</a> 根据数组中的字段查询</h2><p>在restaurants集合中，grades数组包含了内嵌文档作为它的元素。使用“.”号可以在内嵌文档中的某个字段上指定一个条件。同样，需要用引号括住有点号的引用。如下命令查询grades包括一个内嵌文档，它的grade字段的值为&#39;B&#39;的所有文档。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>db.restaurants.find({&quot;grades.grade&quot;: &quot;B&quot;})
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="指定操作条件查询" tabindex="-1"><a class="header-anchor" href="#指定操作条件查询" aria-hidden="true">#</a> 指定操作条件查询</h2><p>MongoDB提供了一些操作用来指定查询条件，比如比较操作。一些操作是除此之外的，比如<code>$or</code>和<code>$and</code>条件操作。使用操作的查询条件的格式如下：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>{ <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>field1</span><span class="token punctuation">&gt;</span></span>: { <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>operator1</span><span class="token punctuation">&gt;</span></span>: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value1</span><span class="token punctuation">&gt;</span></span> } }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="大于操作-gt" tabindex="-1"><a class="header-anchor" href="#大于操作-gt" aria-hidden="true">#</a> 大于操作($gt)</h2><p>查询所有grades数组的内嵌文档中score字段的值大于30的文档。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>db.restaurants.find( { &quot;grades.score&quot;: { $gt: 30 } } )
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="小于操作-lt" tabindex="-1"><a class="header-anchor" href="#小于操作-lt" aria-hidden="true">#</a> 小于操作($lt)</h2><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>db.restaurants.find( { &quot;grades.score&quot;: { $lt: 10 } } )

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="逻辑and" tabindex="-1"><a class="header-anchor" href="#逻辑and" aria-hidden="true">#</a> 逻辑AND</h2><p>你可以使用逻辑AND用于查询条件之间，使用逗号隔开。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>db.restaurants.find( { &quot;cuisine&quot;: &quot;Italian&quot;, &quot;address.zipcode&quot;: &quot;10075&quot; } )
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="逻辑or" tabindex="-1"><a class="header-anchor" href="#逻辑or" aria-hidden="true">#</a> 逻辑OR</h2><p>你可以为多个查询条件中使用逻辑OR，使用$or查询操作。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>db.restaurants.find(
   { $or: [ { &quot;cuisine&quot;: &quot;Italian&quot; }, { &quot;address.zipcode&quot;: &quot;10075&quot; } ] }
)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然，$and也可以使用上面的语法。</p><h2 id="排序查询结果" tabindex="-1"><a class="header-anchor" href="#排序查询结果" aria-hidden="true">#</a> 排序查询结果</h2><p>指定查询结果排序方式的就是在查询后追加一个<code>sort()</code>方法调用。传递给此方法一个文档，包含指定排序字段和排序类型。1表示长充，-1表示降序。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>db.restaurants.find().sort( { &quot;borough&quot;: 1, &quot;address.zipcode&quot;: 1 } )
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如上命令，先按borough字段升序排列，再按address.zipcode升序排。</p>`,41),i=[t];function r(l,o){return e(),n("div",null,i)}const u=a(d,[["render",r],["__file","06.html.vue"]]);export{u as default};
